{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p>Welcome to the general documentation of Aruna.</p> <p>This documentation includes a basic usage guide with lots and lots of API examples, information about the internal data structure and much more in the future such as deployment recipes, theoretical concepts, the database entity-relationship model and some generic user story playbooks.</p> <p>Deeper technical documentation can be found in the implementation repositories for the API and the main components. Details on the individual structures can be found in the API documentation and/or the Internal Data Structure section of this documentation.</p>"},{"location":"#concept","title":"Concept","text":"<p>Aruna is a cloud-native, geo-redundant, scalable, and domain-agnostic object storage based data mesh system that orchestrates scientific data and a rich set of associated metadata according to FAIR principles. </p> <p>Aruna is implemented in Rust and provides multiple access methods for end users, such as a gRPC and JSON-over-REST API, as well as pre-built client libraries for multiple programming languages. The system uses an underlying distributed NewSQL database to manage detailed information about its resources. The database can be deployed across multiple data centers and scaled horizontally to keep pace with the growth of the data stored. Data submitted by users is stored using data proxies, which provide an S3-compatible API with additional functionality to abstract from existing storage infrastructures. This allows a variety of different academic computing and storage providers to be integrated into the system, enabling easy and automated offsite backups and site-local caches, while allowing participants to retain full data sovereignty.</p> <p>All data uploaded and stored by users is stored as an Object, represented as a sequence of bytes without any semantic information. Once uploaded, the data of these Objects are immutable. Updates of the data create new Objects that reference the original Object, resulting in a history of changes. Objects are organized into Projects with optional Collections and Datasets. A Dataset consists of closely related Objects and is used to combine data and metadata for easier access and organization. Collections and Projects, on the other hand, contain a set of Objects and Datasets that represent a scoped view of the data. Collections, Datasets and Projects can also be snapshotted, capturing the current state and providing a persistent, versioned identifier. This allows other researchers to accurately reproduce results based on a specific version, while allowing for continuous modification of the current data. All resources and their relationships form a directed acyclic graph (DAG) with Projects as roots and Objects as leaves.</p> <p> </p> Schematic overview of centralised and decentralised Aruna components. The centralised Aruna components handle authentication and authorisation by integrating existing IAM providers in combination with user-specific attributes (ABAC). The central components also provide a registry with meta-descriptions and locality information making records discoverable. The decentralised components consist of data proxy applications that expose existing data structures via a common S3 interface and enable data exchange and caching in a peer to peer network within and between participants. ."},{"location":"#components","title":"Components","text":"<p>Schematic of a hierarchical structure of Aruna resources. A more detailed description of the individual parts can be found in the Data Structure section.</p>"},{"location":"#api","title":"API","text":"<p> Github repo</p> <p>This repo contains the definitions of the Aruna API. It is written in the protocol-buffers interface definition language (IDL). This can be used to automatically generate clients in many different programming languages using the grpc framework.</p> <p>With the release of a new API version, the client libraries are automatically compiled and updated to the latest version. The API is fundamentally backwards compatible, which means that users' applications will continue to work as usual before they also decide to move to the new version.</p> <ul> <li>Rust API stubs: GitHub or crates.io</li> <li>Go API stubs: GitHub</li> <li>Python API stubs: GitHub or PyPI</li> <li>Java API stubs: GitHub or GitHub Packages</li> </ul>"},{"location":"#aruna-data-orchestration-engine","title":"Aruna Data Orchestration Engine","text":"<p> Github repo</p> <p>The implementation of the Server, that handles the incoming requests, and DataProxy, that handles the communication between the data storage backend and Aruna.</p> <p>Aruna is a geo-redundant data orchestration engine that manages scientific data and a rich set of associated metadata according to FAIR principles.</p> <p>It supports multiple data storage backends (e.g. S3, File ...) via data proxies that expose an S3-compatible interface. The main server handles metadata, user and resource hierarchies while the data proxies handle the data itself. Data proxies can communicate with each other in a peer-to-peer-like network and share data.</p> <p>This repository is split into two components, the server and the data proxy.</p> <ul> <li>FAIR, geo-redundant, data storage for multiple scientific domains</li> <li>Decentralized data storage system</li> <li>Data proxy specific authorization rules to restrict access on the data side</li> <li>Data proxy ingestion that can integrate existing data collections</li> <li>Organization of your data objects into projects, collections and datasets</li> <li>Flexible, file format and data structure independent metadata annotation via labels and dedicated metadata files (e.g. schema.org)</li> <li>Notification streams for all actions performed</li> <li>Compatible with multiple (existing) data storage architectures (S3, File, ...)</li> <li>S3-compatible API for pre-authenticated upload and download URLs</li> <li>REST-API and dedicated client libraries for Python, Rust, Go and Java</li> <li>Hook system to integrate external workflows for data validation and transformation</li> <li>Dedicated rule system to handle custom server-side authorization</li> </ul>"},{"location":"#implementation-design-trivia","title":"Implementation Design Trivia","text":"<ul> <li>A distributed NewSQL RDBMS will be used as database backend for the Aruna Server</li> <li>The core Aruna components and modules are implemented in Rust</li> <li>The base API interface is defined using Protocol Buffers</li> <li>All endpoints work with JSON over HTTP just as they would do with requests made via gRPC from individual clients</li> <li>Client stubs will be generated for major programming languages on every API release (listed here)</li> <li>A web UI is available for demonstration purposes</li> <li>A CLI client will be offered in the future to simplify the usage entry barrier</li> </ul>"},{"location":"generic_playbooks/","title":"Introduction","text":"<p>In the future, this section will contain generic playbooks that cover simple user stories or even complete use cases.</p> <p>All steps will be covered in detail, from the creation and management of the individual components, to sensible rights management, to tips and tricks to save unnecessary work.</p> <p>Stay tuned </p>"},{"location":"get_started/basic_usage/00_index/","title":"Basic Usage","text":"<p>This section deals with the basics of using Aruna.  The first step is a basic introduction on how to get access to the storage system.  In addition, there is a simple tutorial on how to connect to the gRPC endpoint of an Aruna instance using the client API packages and initialize the individual client services.  However, this addition is only relevant if you plan to use one of the gRPC clients provided by our API packages.</p> <p>Finally, the next sections deal with the individual resource client services which can also be selected individually in the navigation on the left side.</p> <p>Please note that we try to make the documentation as complete as possible. Each listed operation is explained with a short description and minimalistic examples for isolated use. If API examples for specific operations are missing, please refer to our full  Aruna REST API Swagger-UI, which provides a complete overview of the Aruna API endpoints and their matching requests and responses.</p> <p>Let's get started </p>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/","title":"Get Storage Access","text":""},{"location":"get_started/basic_usage/01_Get-Storage-Access/#introduction","title":"Introduction","text":"<p>The preparation for creating an account in Aruna is minimal. It is only required that you are already registered in a supported AAI. Currently that is: </p> <ul> <li>GWDG SSO Service, i.e. DFN AAI, Life Science Login (ELIXIR AAI) or GfBio Accounts</li> </ul> <p>These are also the current options that are offered if you want to register or login via the Aruna demo website. If you want to register via the Aruna API instead, you just have to put the OIDC token you received from one of the previously mentioned services into the user registration request header for authorization.</p> <p>From here on you have two possibilities to authenticate/authorize all of your actions inside Aruna system:</p> <ol> <li>You can use your OIDC token which consumes the granted permissions you have on resources.</li> <li>You create API tokens which can either <ul> <li>Consume the permissions you have on resources</li> <li>Have scoped permissions which are directly associated with the token</li> </ul> </li> </ol>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/#client-creation","title":"Client creation","text":"<p>If you plan to send your requests via gRPC the first step is to establish a connection to the gRPC gateway of the server you want to send the requests to.</p> <p>The presence of a client connection to the specific resource service is required for all further requests in this tutorial if the requests are send via gRPC.</p> <p>Development instance endpoint URLs</p> <p>The development instance can be used for testing purposes. It can be accessed via the following URLs after successful registration.</p> <p>Please remember that the development instance in no way guarantees data consistency and availability!</p> <ul> <li>JSON-over-HTTP: <code>https://api.dev.aruna-storage.org</code> or localized e.g. <code>https://api.gi.dev.aruna-storage.org</code></li> <li>gRPC Clients: <code>https://grpc.dev.aruna-storage.org</code> or localized e.g. <code>https://grpc.gi.dev.aruna-storage.org</code></li> <li>DataProxies: e.g. <code>https://proxy.gi.dev.aruna-storage.org</code></li> </ul> <p>It is also emphasized that Aruna is a data orchestration engine that orchestrates data and metadata on behalf of multiple storage instances. While we provide some physical storage for our partners, not all storage instances are operated by us.</p> <p>Danger</p> <p>These are minimal reproducible examples only for demonstration purposes which should not be used 'as-is' in a production environment!</p>  Rust Python Python (simple) <p>To use the Rust API library you have to set it as dependency <code>aruna-rust-api = \"&lt;Aruna-Rust-API-Version&gt;\"</code> in the <code>cargo.toml</code> of your project.</p> <p>You can find the latest version of the Aruna Rust API package on crates.io.</p> <p>Note</p> <p>This example additionally implements an interceptor which adds the authorization token automatically to each request send by the service clients.</p> <p>It is a little more complicated and extra work up front but offers the advantage of having to worry less about the correct API token request metadata later.</p> <p>All Rust examples in this documentation assume that the client services have been initialized with an interceptor.</p> <pre><code>use aruna_rust_api::api::storage::services::v2::{\n    authorization_service_client::AuthorizationServiceClient,\n    collection_service_client::CollectionServiceClient,\n    dataset_service_client::DatasetServiceClient,\n    object_service_client::ObjectServiceClient,\n    project_service_client::ProjectServiceClient,\n    storage_status_service_client::StorageStatusServiceClient,\n    user_service_client::UserServiceClient,\n}\nuse std::sync::Arc;\nuse tonic::codegen::InterceptedService;\nuse tonic::metadata::{AsciiMetadataKey, AsciiMetadataValue};\nuse tonic::transport::{Channel, ClientTlsConfig};\n\n// Create a client interceptor which always adds the specified api token to the request header\n#[derive(Clone)]\npub struct ClientInterceptor {\n    api_token: String,\n}\n// Implement a request interceptor which always adds \n//  the authorization header with a specific API token to all requests\nimpl tonic::service::Interceptor for ClientInterceptor {\n    fn call(&amp;mut self, request: tonic::Request&lt;()&gt;) -&gt; Result&lt;tonic::Request&lt;()&gt;, tonic::Status&gt; {\n        let mut mut_req: tonic::Request&lt;()&gt; = request;\n        let metadata = mut_req.metadata_mut();\n        metadata.append(\n            AsciiMetadataKey::from_bytes(\"Authorization\".as_bytes()).unwrap(),\n            AsciiMetadataValue::try_from(format!(\"Bearer {}\", self.api_token.as_str())).unwrap(),\n        );\n\n        return Ok(mut_req);\n    }\n}\n\nfn main() {\n    // Create connection to the Aruna instance via gRPC\n    let api_token   = \"MySecretArunaApiToken\".to_string();\n    let tls_config  = ClientTlsConfig::new();\n    let endpoint    = Channel::from_shared(\"https://&lt;URL-To-Aruna-Instance-gRPC-endpoint&gt;\").unwrap().tls_config(tls_config).unwrap();\n    let channel     = endpoint.connect().await.unwrap();\n    let interceptor = ClientInterceptor { api_token: api_token.clone() };\n\n    // Create the individual client services\n    let mut info_client       = StorageStatusServiceClient::new(channel.clone());\n    let mut auth_client       = AuthorizationServiceClient::with_interceptor(channel.clone(), interceptor.clone());\n    let mut user_client       = UserServiceClient::with_interceptor(channel.clone(), interceptor.clone());\n    let mut project_client    = ProjectServiceClient::with_interceptor(channel.clone(), interceptor.clone());\n    let mut collection_client = CollectionServiceClient::with_interceptor(channel.clone(), interceptor.clone());\n    let mut dataset_client    = DatasetServiceClient::with_interceptor(channel.clone(), interceptor.clone());\n    let mut object_client     = ObjectServiceClient::with_interceptor(channel.clone(), interceptor.clone());\n    // let mut other_client = ...\n\n    // Do something with the client services ...\n}\n</code></pre> <p>To use the Python API library in your Python project you have to install the PyPI package: <code>pip install Aruna-Python-API</code>.</p> <p>Note</p> <p>This example additionally implements an interceptor which adds the authorization token automatically to each request send by the service clients.</p> <p>It is a little more complicated and extra work up front but offers the advantage of having to worry less about the correct API token request metadata later.</p> <p>All Python examples in this documentation assume that the client services have been initialized with an interceptor.</p> <pre><code>import collections\nimport grpc\n\nfrom aruna.api.storage.services.v2.info_service_pb2_grpc import StorageStatusServiceStub\nfrom aruna.api.storage.services.v2.authorization_service_pb2_grpc import AuthorizationServiceStub\nfrom aruna.api.storage.services.v2.user_service_pb2_grpc import UserServiceStub\nfrom aruna.api.storage.services.v2.project_service_pb2_grpc import ProjectServiceStub\nfrom aruna.api.storage.services.v2.collection_service_pb2_grpc import CollectionServiceStub\nfrom aruna.api.storage.services.v2.dataset_service_pb2_grpc import DatasetServiceStub\nfrom aruna.api.storage.services.v2.object_service_pb2_grpc import ObjectServiceStub\n\n# Valid Aruna API token\n#   In a production environment this should be stored in a more secure location ...\nAPI_TOKEN = 'MySecretArunaApiToken'\n\n# Aruna instance gRPC endpoint\nARUNA_HOST = '&lt;URL-To-Aruna-Instance-gRPC-endpoint&gt;' # Protocol (e.g. https://) has to be omitted\nARUNA_PORT = '443'\n\n\nclass _MyAuthInterceptor(grpc.UnaryUnaryClientInterceptor):\n    \"\"\"\n    Implement abstract class grpc.UnaryUnaryClientInterceptor to extend request metadata.\n    \"\"\"\n    def intercept_unary_unary(self, continuation, client_call_details, request):\n        # Append authorization token to request metadata\n        metadata = []\n        if client_call_details.metadata is not None:\n           metadata = list(client_call_details.metadata)\n        metadata.append(('authorization', f'Bearer {API_TOKEN}'))\n\n        # Continue with new client call details\n        request_iterator = iter((request,))\n        updated_details = _ClientCallDetails(\n            client_call_details.method, client_call_details.timeout, \n            metadata, client_call_details.credentials\n        )\n\n        return continuation(updated_details, next(request_iterator))\n\n\nclass _ClientCallDetails(\n        collections.namedtuple(\n            '_ClientCallDetails',\n            ('method', 'timeout', 'metadata', 'credentials')),\n        grpc.ClientCallDetails):\n    \"\"\"\n    Implement grpc.ClientCallDetails to pass modified request details in interceptor.\n    \"\"\"\n    pass\n\n\nclass ArunaClient(object):\n    \"\"\"\n     Class to contain the Aruna gRPC client service stubs for easier usage.\n    \"\"\"\n    def __init__(self, ):\n        ssl_credentials = grpc.ssl_channel_credentials()\n        self.secure_channel = grpc.secure_channel(\"{}:{}\".format(ARUNA_HOST, ARUNA_PORT), ssl_credentials)\n        self.intercept_channel = grpc.intercept_channel(self.secure_channel, _MyAuthInterceptor())\n\n        self.info_client = StorageStatusServiceStub(self.intercept_channel)\n        self.auth_client = AuthorizationServiceStub(self.intercept_channel)\n        self.user_client = UserServiceStub(self.intercept_channel)\n        self.project_client = ProjectServiceStub(self.intercept_channel)\n        self.collection_client = CollectionServiceStub(self.intercept_channel)\n        self.dataset_client = DatasetServiceStub(self.intercept_channel)\n        self.object_client = ObjectServiceStub(self.intercept_channel)\n        # self.other_client = ...\n\n\n# Entry point of the script\nif __name__ == '__main__':\n    # Instantiate ArunaClient\n    client = ArunaClient()\n\n    # Do something with the client services ...\n</code></pre> <p>To use the Python API library in your Python project you have to install the PyPI package: <code>pip install Aruna-Python-API</code>.</p> <p>Note</p> <p>This example does not consider adding the authorization token metadata to every request. </p> <p>In this case you have to manually add the authorization token header by using the <code>with_call(...)</code> extension of the client service methods.</p> <p>All Python examples in this documentation assume that the client services have been initialized with an interceptor.</p> <pre><code>import grpc\n\nfrom aruna.api.storage.services.v2.info_service_pb2_grpc import StorageStatusServiceStub\nfrom aruna.api.storage.services.v2.authorization_service_pb2_grpc import AuthorizationServiceStub\nfrom aruna.api.storage.services.v2.user_service_pb2_grpc import UserServiceStub\nfrom aruna.api.storage.services.v2.project_service_pb2_grpc import ProjectServiceStub\nfrom aruna.api.storage.services.v2.collection_service_pb2_grpc import CollectionServiceStub\nfrom aruna.api.storage.services.v2.dataset_service_pb2_grpc import DatasetServiceStub\nfrom aruna.api.storage.services.v2.object_service_pb2_grpc import ObjectServiceStub\n\n# Valid Aruna API token\n#   In a production environment this should be stored in a more secure location ...\nAPI_TOKEN = 'MySecretArunaApiToken'\n\n# Aruna instance gRPC endpoint\nARUNA_HOST = '&lt;URL-To-Aruna-Instance-gRPC-Endpoint&gt;' # Protocol (e.g. https://) has to be omitted\nARUNA_PORT = '443'\n\n\nclass ArunaClient(object):\n    \"\"\"\n    Class to contain the Aruna gRPC client service stubs for easier usage.\n    \"\"\"\n    def __init__(self):\n        # Read TLS credentials from local trusted certificates and instantiate a channel\n        ssl_credentials = grpc.ssl_channel_credentials()\n        self.channel    = grpc.secure_channel(\"{}:{}\".format(ARUNA_HOST, ARUNA_PORT), ssl_credentials)\n\n        self.info_client = StorageStatusServiceStub(self.channel)\n        self.auth_client = AuthorizationServiceStub(self.channel)\n        self.user_client = UserServiceStub(self.channel)\n        self.project_client = ProjectServiceStub(self.channel)\n        self.collection_client = CollectionServiceStub(self.channel)\n        self.dataset_client = DatasetServiceStub(self.channel)\n        self.object_client = ObjectServiceStub(self.channel)\n        # self.xyz_client = ...\n\n\n# Entry point of the Python script\nif __name__ == '__main__':\n    # Instantiate ArunaClient\n    client = ArunaClient()\n\n    # Do something with the client services ... for example:\n    response, call = client.user_client.GetUser.with_call(\n        request=GetUserRequest(),\n        metadata=(('Authorization', f\"Bearer {API_TOKEN}\"),)\n    )\n</code></pre>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/#user-registration","title":"User registration","text":"<p>Users can register themselves with an email address and an individual display name in an Aruna instance.  You only need the valid OIDC token received from one of the supported AAI logins.</p> <p>The <code>display_name</code> and <code>email</code> parameters are mandatory while <code>project</code> is optional.  The provided email will only be used for system-relevant notifications e.g. advance notifications of maintenance. The project parameter is a hint for the administrators to associate the newly registered user with a project for identification purposes.</p>  cURL Rust Python <pre><code># Native JSON request to register OIDC user\ncurl -d '\n  {\n    \"display_name\": \"Forename Surname\",\n    \"email\": \"forename.surname@example.com\", \n    \"project\": \"My little science project\"\n  }' \\ \n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\ \n     -H 'Content-Type: application/json' \\ \n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/register\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to register OIDC user\nlet request = RegisterUserRequest {\n    display_name: \"Forename Surname\".to_string(),\n    email: \"forename.surname@example.com\".to_string(),\n    project: \"My little science project\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.register_user(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"Registered user: {:#?}\", response.user_id)\n</code></pre> <pre><code># Create tonic/ArunaAPI request to register OIDC user\nrequest = RegisterUserRequest(\n    display_name=\"Forename Surname\",\n    email=\"forename.surname@example.com\",\n    project=\"My little science project\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.RegisterUser(\n    request=request\n)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/#user-activation","title":"User activation","text":"<p>After registration users additionally have to be activated once in a second step to prevent misuse of the system.</p> Required permissions <p>Users can only be activated by Aruna global administrators.</p>  cURL Rust Python <pre><code># For convenience, administrators can request info on all unactivated users at once\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\ \n     -H 'Content-Type: application/json' \\ \n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/not_activated\n</code></pre> <pre><code># Native JSON request to activate registered user\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/{user-id}/activate\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch all not activated users\nlet request = GetNotActivatedUsersRequest {};\n\n// Send the request to the Aruna instance gRPC gateway\nlet unactivated = user_client.get_not_activated_users(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", unactivated);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request for user activation    \nlet request = ActivateUserRequest {\n    user_id: \"&lt;user-id&gt;\".to_string() // Has to be a valid ULID of a registered user\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.activate_user(request)\n                                   .await\n                                   .unwrap()\n                                   .into_inner();\n\n// Do something with the response\nprintln!(\"Activated user: {:#?}\", response.user_id)\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch all not activated users\nrequest = GetNotActivatedUsersRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.GetNotActivatedUsers(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request for user activation\nrequest = ActivateUserRequest(\n    user_id=\"&lt;user-id&gt;\"  # Has to be a valid ULID of a registered user\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.ActivateUser(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/#who-am-i-what-am-i","title":"Who am I / What am I","text":"<p>To check which user a token is associated with or get information about the current users permissions, you can use the UserService API.</p> Required permissions <p>Registered users do not need special permissions to fetch information about their user account.</p> <p>Only Aruna global administrators can request user information of other users i.e. set the <code>user_id</code> parameter of the request to the id of another user.</p>  cURL Rust Python <pre><code># Native JSON request to fetch user information associated with authorization token\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user\n</code></pre> <pre><code># Native JSON request to fetch user information associated with the provided user id\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user?userId=&lt;user-id&gt;'\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch user info of current user\nlet request = GetUserRequest {\n    user_id: \"\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.get_user(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch user info of current user\nrequest = GetUserRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.GetUser(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/","title":"How to deal with tokens and permissions","text":""},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#introduction","title":"Introduction","text":"<p>Every action inside Aruna is authenticated and authorized via tokens which have to be provided in the request header: <code>Authorization: Bearer &lt;token&gt;</code>.</p> <p>This can be a either a generated API token or your OIDC token which you received after authentication against the OIDC provider supported by Aruna. API tokens have the advantage that they can not only be used to authorise user-specific permissions, but can also be explicitly generated with permissions for a specific resource. In addition, the exact expiry date of an API token can be defined.</p> <p>For data protection reasons, a user must also register with each Dataproxy with which they wish to interact. By registering once, the DataProxy receives permission to synchronise information about the user. If a user wants to communicate directly with a dataproxy, he or she must request S3 credentials from/for the dataproxy in advance, which also counts as registration.</p>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#api-tokens","title":"API tokens","text":"<p>An API token can be created with different scopes and/or different permissions.</p>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#available-token-permissions","title":"Available token permissions","text":"<ul> <li><code>ADMIN</code> (\"PERMISSION_LEVEL_ADMIN\"): Can create new resources, modify existing and additionally delete</li> <li><code>WRITE</code> (\"PERMISSION_LEVEL_WRITE\"): Can create new resources and modify existing</li> <li><code>APPEND</code> (\"PERMISSION_LEVEL_APPEND\"): Can create new resources but cannot modify existing</li> <li><code>READ</code> (\"PERMISSION_LEVEL_READ\"): Read only access</li> <li><code>NONE</code> (\"PERMISSION_LEVEL_NONE\"): No permissions granted</li> </ul> <p>So when we talk about minimum requirements for authorization, we get the following order: <code>ADMIN &gt; WRITE &gt; APPEND &gt; READ &gt; NONE</code></p>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#available-api-token-scopes","title":"Available API token scopes","text":"Global/Personal <p>The field <code>permission</code> is empty on creation.  This token is valid with nearly every request against the ArunaServer and inherits the permissions which are set user-specific on resources.  For example, when a user is added to a Project with READ permission,  this token \"inherits and enforces\" the user's READ permission with every request regarding the specific Project and its underlying resources. </p> <p>Warning</p> <p>These tokens should only be used by the user itself as they are bound to the permissions of the user who created it!</p> Resource:  <p>The field <code>permission</code> is filled with a valid ULID of an existing Aruna resource and the corresponding permission level. This token is valid for the specific resource and all the resources which are registered beneath it.  For example, these tokens can be used to give external users general but time limited access to a Project and all resources registered under it. However, these tokens should also not be distributed carelessly.</p>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#generate-api-tokens","title":"Generate API tokens","text":"<p>An API token can be created with different scopes and/or different permissions.</p> <p>Warning</p> <p>The token secret is only available once in the response and cannot be re-generated!</p> <p>Store the received secret keys in a secure location for further usage. If a token secret is lost or compromised, delete the old token and generate a new one.</p>  cURL Rust Python <pre><code># Native JSON request to create a global/personal token.\n#  This token inherits the permissions from the resources the user has been granted permissions for.\ncurl -d '\n  {\n    \"name\": \"&lt;token-display-name&gt;\",\n    \"expiresAt\": \"2025-01-01T00:00:00.000Z\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/token\n</code></pre> <pre><code># Native JSON request to create a Project scoped token with WRITE permissions\ncurl -d '\n  {\n    \"name\": \"&lt;token-display-name&gt;\",\n    \"permission\": {\n      \"projectId\": \"&lt;project-id&gt;\",\n      \"collectionId\": \"\",\n      \"datasetId\": \"\",\n      \"objectId\": \"\",\n      \"permissionLevel\": \"PERMISSION_LEVEL_WRITE\"\n    },\n    \"expiresAt\": \"2025-01-01T00:00:00.000Z\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/token\n</code></pre> <pre><code># Native JSON request to create a Collection scoped token with READ permissions\ncurl -d '\n  {\n    \"name\": \"&lt;token-display-name&gt;\",\n    \"permission\": {\n      \"projectId\": \"\",\n      \"collectionId\": \"&lt;collection-id&gt;\",\n      \"datasetId\": \"\",\n      \"objectId\": \"\",\n      \"permissionLevel\": \"PERMISSION_LEVEL_READ\"\n    },\n    \"expiresAt\": \"2025-01-01T00:00:00.000Z\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/token\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a global/personal API token with expiration date\nlet request = CreateApiTokenRequest {\n    name: \"&lt;token-display-name&gt;\".to_string(),\n    permission: None,\n    expires_at: Some(\n        NaiveDate::from_ymd_opt(2030, 01, 01)\n            .unwrap()\n            .and_hms_opt(0, 0, 0)\n            .unwrap()\n            .into(),\n    ),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.create_api_token(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a Project scoped token with WRITE permissions\nlet request = CreateApiTokenRequest {\n    name: \"&lt;token-display-name&gt;\".to_string(),\n    permission: Some(Permission {\n        permission_level: PermissionLevel::Write as i32,\n        resource_id: Some(ResourceId::ProjectId(\"&lt;project-id&gt;\".to_string())),\n    }),\n    expires_at: Some(\n        NaiveDate::from_ymd_opt(2030, 01, 01)\n            .unwrap()\n            .and_hms_opt(0, 0, 0)\n            .unwrap()\n            .into(),\n    ),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.create_api_token(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a Collection scoped token with READ permissions\nlet request = CreateApiTokenRequest {\n    name: \"&lt;token-display-name&gt;\".to_string(),\n    permission: Some(Permission {\n        permission_level: PermissionLevel::Read as i32,\n        resource_id: Some(ResourceId::CollectionId(\"&lt;collection-id&gt;\".to_string())),\n    }),\n    expires_at: Some(\n        NaiveDate::from_ymd_opt(2030, 01, 01)\n            .unwrap()\n            .and_hms_opt(0, 0, 0)\n            .unwrap()\n            .into(),\n    ),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.create_api_token(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a global/personal API token with expiration date\nrequest = CreateAPITokenRequest(\n    name=\"&lt;token-display-name&gt;\",\n    expires_at=Timestamp(seconds=int(datetime.datetime(2030, 1, 1).timestamp()))\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.CreateAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a project scoped API token with WRITE permission\nrequest = CreateAPITokenRequest(\n    name=\"&lt;token-display-name&gt;\",\n    permission=Permission(\n        project_id=\"&lt;project-id&gt;\",\n        permission_level=\"PERMISSION_LEVEL_WRITE\"\n    ),\n    expires_at=Timestamp(seconds=int(datetime.datetime(2030, 1, 1).timestamp()))\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.CreateAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a collection scoped API token with READ permission\nrequest = CreateAPITokenRequest(\n    name=\"&lt;token-display-name&gt;\",\n    permission=Permission(\n        collection_id=\"&lt;collection-id&gt;\",\n        permission_level=\"PERMISSION_LEVEL_READ\"\n    ),\n    expires_at=Timestamp(seconds=int(datetime.datetime(2030, 1, 1).timestamp()))\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.CreateAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#get-api-tokens","title":"Get API token(s)","text":"<p>Meta information of tokens can be fetched after creation e.g. to check its expiry date.</p> <p>Info</p> <p>This request does not re-display the generated API token secret. See Generate API Tokens.</p>  cURL Rust Python <pre><code># Native JSON request to get info on a specific API token by its id\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/token/{token-id}\n</code></pre> <pre><code># Native JSON request to get info on all tokens associated with the current user\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/tokens\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to get info on a specific API token by its id\nlet request = GetApiTokenRequest { \n    token_id: \"&lt;token-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.get_api_token(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to get info on all tokens associated with the current user\nlet request = GetApiTokensRequest {};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.get_api_tokens(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to get info on a specific API token by its id\nrequest = GetAPITokenRequest(\n    token_id=\"&lt;token-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.GetAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to get info on all tokens associated with the current user\nrequest = GetAPITokensRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.GetAPITokens(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#revoke-tokens","title":"Revoke token(s)","text":"<p>API examples of how to revoke/delete a specific API token or all tokens of the current user.</p> <p>Note</p> <p>Only Aruna instance administrators can revoke API tokens of other users.</p>  cURL Rust Python <pre><code># Native JSON request to revoke the specific API token\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/token/{token-id}\n</code></pre> <pre><code># Native JSON request to revoke all tokens of the current user\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/tokens\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to revoke the specific API token\nlet request = DeleteApiTokenRequest {\n    token_id: \"&lt;token-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.delete_api_token(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to to revoke all tokens of the current user\nlet request = DeleteApiTokensRequest {\n    user_id: \"\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.delete_api_tokens(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to revoke the specific API token\nrequest = DeleteAPITokenRequest(\n    token_id=\"&lt;token-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.DeleteAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to to revoke all tokens of the current user\nrequest = DeleteAPITokensRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.DeleteAPITokens(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#get-s3-credentials","title":"Get S3 credentials","text":"<p>The Aruna DataProxy implements an S3 compatible interface that implements a basic  subset of the S3 functionality and can be used with any client that makes use of the S3 protocol. Before the interface can be  used for uploading and downloading data, a user must have fetched S3 credentials at least once for the specific DataProxy to register  the DataProxy as trusted with the user.</p>  cURL Rust Python <pre><code># Native JSON request to fetch S3 credentials for the specific endpoint\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET \"https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/{user-id}/s3_credentials?endpointId={endpoint-id}\"\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch S3 credentials for the specific endpoint\nlet request = GetS3CredentialsUserRequest {\n    user_id: \"&lt;user-id&gt;\".to_string(),\n    endpoint_id: \"&lt;endpoint-id&gt;\".to_string(),\n};\n\n// Get/Create S3 credentials to register user at DataProxy\nlet response = user_client.get_s3_credentials_user(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch S3 credentials for the specific endpoint\nrequest = GetS3CredentialsUserRequest(\n    user_id=\"&lt;user-id&gt;\",\n    endpoint_id=\"&lt;endpoint-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.GetS3CredentialsUser(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> Get IDs of available DataProxy Endpoints <p>To fetch the IDs of all publicly available DataProxy endpoints in Aruna, you can use the EndpointService API. More specifically the <code>GetEndpoints</code> or <code>GetDefaultEndpoint</code> requests. </p> <p>These requests do not require any special permissions.</p>  cURL Rust Python <pre><code># Native JSON request to fetch info on all available endpoints\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET \"https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/endpoints\"\n</code></pre> <pre><code># Native JSON request to fetch info of the default endpoint of a ArunaServer instance\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET \"https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/endpoints/default\"\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch info on all available endpoints\nlet request = GetEndpointsRequest {};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self\n    .endpoint_client\n    .get_endpoints(request)\n    .await\n    .unwrap()\n    .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch info of the default endpoint of a ArunaServer instance\nlet request = GetDefaultEndpointRequest {};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self\n    .endpoint_client\n    .get_default_endpoint(request)\n    .await\n    .unwrap()\n    .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch info on all available endpoints\nrequest = GetEndpointsRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.endpoint_client.GetEndpoints(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch info of the default endpoint of a ArunaServer instance\nrequest = GetDefaultEndpointRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.endpoint_client.GetDefaultEndpoint(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#grant-permissions","title":"Grant permissions","text":"<p>For hierarchical resources users can be granted specific permissions that are inherited and enforced by their global/personal tokens.  This makes it easy to add users e.g. to Projects without having to create additional tokens. </p> <p>An individual user can only have one specific permission granted per resource.</p> Required permissions <p>This request requires at least ADMIN permissions on the specific resource.</p>  cURL Rust Python <pre><code># Native JSON request to grant user admin permissions to a resource\ncurl -d '\n  {\n    \"resourceId\": \"&lt;resource-id&gt;\",\n    \"userId\": \"&lt;user-id&gt;\",\n    \"permission\": \"PERMISSION_LEVEL_ADMIN\",\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/authorizations\n</code></pre> <pre><code># Native JSON request to add user with read only permissions to a resource\ncurl -d '\n  {\n    \"resourceId\": \"&lt;resource-id&gt;\",\n    \"userId\": \"&lt;user-id&gt;\",\n    \"permission\": \"PERMISSION_LEVEL_READ\",\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/authorizations\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to grant user admin permissions to a resource\nlet request = CreateAuthorizationRequest {\n    resource_id: \"&lt;resource-id&gt;\".to_string(),\n    user_id: \"&lt;user-id&gt;\".to_string(),\n    permission_level: PermissionLevel::Admin as i32,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = auth_client.create_authorization(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add user with read only permissions to a resource\nlet request = CreateAuthorizationRequest {\n    resource_id: \"&lt;resource-id&gt;\".to_string(),\n    user_id: \"&lt;user-id&gt;\".to_string(),\n    permission_level: PermissionLevel::Read as i32,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = auth_client.create_authorization(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to grant user admin permissions to a resource\nrequest = CreateAuthorizationRequest(\n    resource_id=\"&lt;resource-id&gt;\",\n    user_id=\"&lt;user-id&gt;\",\n    permission=PermissionLevel.Value(\"PERMISSION_LEVEL_ADMIN\")  # Needs int, therefore .Value()\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.auth_client.CreateAuthorization(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to grant user read only permissions to a resource\nrequest = CreateAuthorizationRequest(\n    resource_id=\"&lt;resource-id&gt;\",\n    user_id=\"&lt;user-id&gt;\",\n    permission=PermissionLevel.Value(\"PERMISSION_LEVEL_READ\")  # Needs int, therefore .Value()\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.auth_client.CreateAuthorization(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#update-permissions","title":"Update permissions","text":"<p>The assigned permissions can also be modified afterwards.</p> Required permissions <p>This request requires at least ADMIN permissions on the specific resource.</p>  cURL Rust Python <pre><code># Native JSON request to set a users permission to read only for the specific resource\ncurl -d '\n  {\n    \"userId\": \"&lt;user-id&gt;\",\n    \"permission\": \"PERMISSION_LEVEL_READ\",\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/authorizations/{resource-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to set a users permission to read only for the specific resource\nlet request = UpdateAuthorizationRequest {\n    resource_id: \"&lt;resource-id&gt;\".to_string(),\n    user_id: \"&lt;user-id&gt;\".to_string(),\n    permission_level: PermissionLevel::Read as i32,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = auth_client.update_authorization(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to set a users permission to read only for the specific resource\nrequest = UpdateAuthorizationRequest(\n    resource_id=\"&lt;resource-id&gt;\",\n    user_id=\"&lt;user-id&gt;\",\n    permission=PermissionLevel.Value(\"PERMISSION_LEVEL_READ\")  # Needs int, therefore .Value()\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.auth_client.UpdateAuthorization(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#remove-permissions","title":"Remove permissions","text":"<p>Users can, of course, also be completely removed from resources again, depriving them of any access with personalized tokens. </p> <p>However, access with Project/Collection/Dataset/Object scoped tokens is not restricted with the removal of users personal permissions!</p> Required permissions <p>This request requires at least ADMIN permissions on the specific resource.</p>  cURL Rust Python <pre><code># Native JSON request to remove a users permission for a specific resource\ncurl -d '\n  {\n    \"userId\": \"&lt;user-id&gt;\",\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/authorizations/{resource-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to remove a users permission for a specific resource\nlet request = DeleteAuthorizationRequest {\n    resource_id: \"&lt;resource-id&gt;\".to_string(),\n    user_id: \"&lt;user-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = auth_client.delete_authorization(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to remove a users permission for a specific resource\nrequest = DeleteAuthorizationRequest(\n    resource_id=\"&lt;project-id&gt;\",\n    user_id=\"&lt;user-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.auth_client.UpdateAuthorization(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#list-permissions","title":"List permissions","text":"<p>All permissions which are assigned for a specific resource can also be listed. </p> <p>This request additionally offers the option to recursively fetch the permissions of all underlying resources.</p> Required permissions <p>This request requires at least ADMIN permissions on the specific resource.</p>  cURL Rust Python <pre><code># Native JSON request to list all assigned permissions for a specific resource\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/authorizations?resourceId=resource-id\n</code></pre> <pre><code># Native JSON request to recursively list all assigned permissions for a specific resource\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/authorizations?resourceId=resource-id&amp;recursive=true\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to list all assigned permissions for a specific resource\nlet request = GetAuthorizationsRequest {\n    resource_id: \"&lt;resource-id&gt;\".to_string(),\n    recursive: false, // Can be set to 'true' to also fetch permissions of underlying resources\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = auth_client.get_authorizations(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to list all assigned permissions for a specific resource\nrequest = DeleteAuthorizationRequest(\n    resource_id=\"&lt;project-id&gt;\",\n    recursive=False # Can be set to 'true' to also fetch permissions of underlying resources\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.auth_client.GetAuthorizations(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/03_How-To-Licenses/","title":"How to use the License API / LicenseServiceClient","text":""},{"location":"get_started/basic_usage/03_How-To-Licenses/#introduction","title":"Introduction","text":"<p>Licences play a major role in the implementation of/compliance with the FAIR principles, especially when it comes to the conditions of data reusability. A licence should clearly describe for humans and machines which rights of use apply to the data, which also implements the legal side of interoperability.</p> <p>For this purpose, a predefined set of the most common licences is provided in Aruna:</p> <ul> <li>All Rights Reserved: <code>AllRightsReserved</code></li> <li>All Creative Commons 4.0: <code>CC0</code>, <code>CC-BY-4.0</code>, <code>CC-BY-SA-4.0</code>, <code>CC-BY-NC-4.0</code>, <code>CC-BY-NC-SA-4.0</code>, <code>CC-BY-ND-4.0</code>, <code>CC-BY-ND-SA-4.0</code></li> <li>MIT license: <code>MIT</code></li> <li>Apache 2.0: <code>Apache-2.0</code></li> <li>GNU General Public License: <code>GPLv3</code>, <code>GPLv2</code></li> </ul> <p>Each object in Aruna can be assigned different licences for the metadata and \"physical\" data, so that a granular definition of the rights of use can be specified. The specification of licences is only mandatory when a project is created. The reason for this is that all other sub-resources can inherit the licences of their parent if no licence is specified when they are created.</p> <p>Default license</p> <p>If no licences are specified when a Project is created, the default licence <code>AllRightsReserved</code> is used.  This is the only licence that can be replaced on a resource without creating a new revision.</p> <p>Other licences of an object cannot be modified \"in-place\" afterwards, but are applied to a new revision of a resource.  Some thought should be given in advance as to which licence is appropriate for the data.</p>"},{"location":"get_started/basic_usage/03_How-To-Licenses/#create-license","title":"Create license","text":"<p>New licenses can be created without any limitations.</p> <p>You should just check twice if the license information is correct as there is no way to edit the created license afterwards.</p> Required permissions <p>To create a new license you only have to be a registered Aruna user.</p>  cURL Rust Python <pre><code># Native JSON request to create a new license\ncurl '\n  {\n    \"tag\": \"CC-BY-SA-4.0\",\n    \"name\": \"Creative Commons Attribution-ShareAlike 4.0 International\",\n    \"text\": \"[Full CC-BY-SA-4.0 license text]\",\n    \"url\": \"https://creativecommons.org/licenses/by-sa/4.0/\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/license\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a new license\nlet request = CreateLicenseRequest {\n    tag: \"CC-BY-SA-4.0\".to_string(),\n    name: \"Creative Commons Attribution-ShareAlike 4.0 International\".to_string(),\n    text: \"[Full CC-BY-SA-4.0 license text]\".to_string(),\n    url: \"https://creativecommons.org/licenses/by-sa/4.0/\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC gateway\nlet response = license_client.create_license(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a new license\nrequest = CreateLicenseRequest(\n    tag=\"CC-BY-SA-4.0\",\n    name=\"Creative Commons Attribution-ShareAlike 4.0 International\",\n    text=\"[Full CC-BY-SA-4.0 license text]\",\n    url=\"https://creativecommons.org/licenses/by-sa/4.0/\",\n)\n\n# Send the request to the Aruna instance gRPC gateway\nresponse = client.info_client.CreateLicense(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/03_How-To-Licenses/#get-specific-license","title":"Get specific license","text":"<p>Licenses can be easily fetched via their tag name.</p> Required permissions <p>To create a new license you only have to be a registered Aruna user.</p>  cURL Rust Python <pre><code># Native JSON request to get a specific license\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/license/{license-tag}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to get a specific license\nlet request = GetLicenseRequest {\n    tag: \"CC-BY-SA-4.0\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC gateway\nlet response = license_client.get_license(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a new license\nrequest = GetLicenseRequest(\n    tag=\"CC-BY-SA-4.0\"\n)\n\n# Send the request to the Aruna instance gRPC gateway\nresponse = client.info_client.GetLicense(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/03_How-To-Licenses/#list-all-available-licenses","title":"List all available licenses","text":"<p>API examples of how to fetch all available license for an overview if a fitting license already exists.</p> Required permissions <p>To create a new license you only have to be a registered Aruna user.</p>  cURL Rust Python <pre><code># Native JSON request to fetch all available licenses\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/licenses\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch all available licenses\nlet request = ListLicensesRequest {};\n\n// Send the request to the Aruna instance gRPC gateway\nlet response = license_client.list_licenses(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch all available licenses\nrequest = GetLicenseRequest()\n\n# Send the request to the Aruna instance gRPC gateway\nresponse = client.info_client.GetLicenses(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Project/","title":"How to use the Project API / ProjectServiceClient","text":""},{"location":"get_started/basic_usage/04_How-To-Project/#introduction","title":"Introduction","text":"<p>Here you get a quick rundown how to basically create, read, update and delete Projects within Aruna.</p> <p>This should be the first step after gaining access to the storage (and maybe creating an API token) which is described in the previous chapters.</p> What is a Project? <p>A Project is the basic resource to organize general user access for stored data  (i.e. Objects). </p> <p>It also acts as an umbrella container for all other resources which means that every hierarchy has a Project as root.  This directly implies that every project name has to be globally unique in the Aruna universe.</p> <p>More in-depth information can be found in the Data Structure section.</p>"},{"location":"get_started/basic_usage/04_How-To-Project/#create-project","title":"Create Project","text":"<p>API examples of how to create a new Project. The project creator is automatically granted ADMIN permissions on the created Project.</p> Required permissions <p>To create a new Project you only have to be a registered Aruna user.</p> <p>Project naming guidelines</p> <ul> <li>Project names are unique globally in the Aruna system</li> <li>Project names are restricted to the following characters: [a-z0-9-] (i.e. alphanumeric lowercase and hyphens)</li> </ul>  cURL Rust Python <p> Tested</p> <pre><code># Native JSON request to create a simple Project\ncurl -d '\n  {\n    \"name\": \"json-api-project\", \n    \"title\": \"JSON API Project\"\n    \"description\": \"Created with JSON over HTTP.\",\n    \"keyValues\": [],\n    \"relations\": [],\n    \"data_class\": \"DATA_CLASS_PUBLIC\",\n    \"preferredEndpoint\": \"\",\n    \"metadataLicenseTag\": \"CC-BY-4.0\",\n    \"defaultDataLicenseTag\": \"CC-BY-4.0\",\n    \"authors\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/project\n</code></pre> <p> Tested</p> <pre><code>// Create tonic/ArunaAPI request to create a simple Project\nlet request = CreateProjectRequest {\n    name: \"rust-api-project\".to_string(),\n    title: \"Rust API Project\".to_string(),\n    description: \"Created with the gRPC Rust API client.\".to_string(),\n    key_values: vec![],\n    relations: vec![],\n    data_class: DataClass::Public as i32,\n    preferred_endpoint: \"\".to_string(), // Can be set to specific endpoint\n    metadata_license_tag: \"CC-BY-4.0\".to_string(),\n    default_data_license_tag: \"CC-BY-4.0\".to_string(),\n    authors: vec![]\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.create_project(request)\n                             .await\n                             .unwrap() //\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a simple Project\nrequest = CreateProjectRequest(\n    name=\"python-api-project\",\n    title=\"Python API Project\",\n    description=\"Created with the gRPC Python API client.\",\n    key_values=[], \n    relations=[], \n    data_class=DataClass.DATA_CLASS_PUBLIC,\n    preferred_endpoint=\"\",\n    metadata_license_tag=\"CC-BY-4.0\",\n    default_data_license_tag=\"CC-BY-4.0\",\n    authors=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.CreateProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Project/#get-project","title":"Get Project","text":"<p>API example for fetching info of an existing Project.</p> Required permissions <p>This request requires at least READ permissions on the specific Project.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of a Project\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/project/{project-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of a Project\nlet request = GetProjectRequest { \n    project_id: \"&lt;project-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.get_project(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of a Project\nrequest = GetProjectRequest(\n    project_id=\"&lt;project-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.GetProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Project/#get-multiple-projects","title":"Get multiple Projects","text":"<p>API examples of how to fetch multiple Projects in a single request.</p> Required permissions <p>This request requires at least READ permissions on all requested Projects.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of multiple projects in one request\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/projects?projectIds=project-id-01&amp;projectIds=project-id-02\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of multiple projects in one request\nlet request = GetProjectsRequest {\n    project_ids: vec![\n        \"&lt;project-id-01&gt;\".to_string(),\n        \"&lt;project-id-02&gt;\".to_string(),\n        \"&lt;...&gt;\".to_string(),\n    ],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.get_projects(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\\n\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of multiple projects in one request\nrequest = GetProjectsRequest(\n    project_ids=[\"&lt;project-id-01&gt;\", \"&lt;project-id-02&gt;\", \"&lt;...&gt;\"] \n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.GetProjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Project/#update-project","title":"Update Project","text":"<p>API examples of how to update individual metadata of an existing Project.</p> Required permissions <ul> <li>Name update needs at least ADMIN permissions on the specific Project</li> <li>Description update needs at least WRITE permissions on the specific Project</li> <li>KeyValue update needs at least WRITE permissions on the specific Project</li> <li>Dataclass update needs at least ADMIN permissions on the specific Project</li> <li>License update needs at least WRITE permissions on the specific Project</li> </ul>  cURL Rust Python <pre><code># Native JSON request to update the name of a Project\ncurl -d '\n  {\n    \"name\": \"updated-json-api-project\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/projects/{project-id}/name\n</code></pre> <pre><code># Native JSON request to update the title of a Project\ncurl -d '\n  {\n    \"title\": \"Updated JSON API Project\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/project/{project-id}/title\n</code></pre> <pre><code># Native JSON request to update the description of a Project\ncurl -d '\n  {\n    \"description\": \"Updated with JSON over HTTP.\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/projects/{project-id}/description\n</code></pre> <pre><code># Native JSON request to update the key-values associated with a Project\ncurl -d '\n  {\n    \"addKeyValues\": [],\n    \"removeKeyValues\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/projects/{project-id}/key_values\n</code></pre> <p>Info</p> <p>Dataclass can only be relaxed: <code>Confidential</code> &gt; <code>Workspace</code> &gt; <code>Private</code> &gt; <code>Public</code></p> <pre><code># Native JSON request to update the dataclass of a Project\ncurl -d '\n  {\n    \"dataClass\": \"DATA_CLASS_PUBLIC\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/projects/{project-id}/data_class\n</code></pre> <pre><code># Native JSON request to update the license of a Project\ncurl -d '\n  {\n    \"metadataLicenseTag\": \"CC0\",\n    \"defaultDataLicenseTag\": \"CC0\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/projects/{project-id}/licenses\n</code></pre> <pre><code># Native JSON request to add an author to a Project\ncurl -d '\n  {\n    \"addAuthors\": [\n        {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"orcid\": \"0000-0002-1825-0097\",\n        \"id\": \"&lt;user-id-if-registered&gt;\"\n        }\n    ],\n    \"removeAuthors\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/project/{project-id}/authors\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the name of a Project\nlet request = UpdateProjectNameRequest {\n    project_id: \"&lt;project-id&gt;\".to_string(),\n    name: \"updated-rust-api-project\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.update_project_name(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the title of a Project\nlet request = UpdateProjectTitleRequest {\n    project_id: \"&lt;project-id&gt;\".to_string(),\n    title: \"Update Rust API Project\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.update_project_title(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the description of a Project\nlet request = UpdateProjectDescriptionRequest {\n    project_id: \"&lt;project-id&gt;\".to_string(),\n    description: \"Updated with the gRPC Rust API client.\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.update_project_description(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the key-values associated with a Project\nlet request = UpdateProjectKeyValuesRequest {\n    project_id: \"&lt;project-id&gt;\".to_string(),\n    add_key_values: vec![], \n    remove_key_values: vec![]\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.update_project_key_values(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <p>Info</p> <p>Dataclass can only be relaxed: <code>Confidential</code> &gt; <code>Private</code> &gt; <code>Public</code></p> <pre><code>// Create tonic/ArunaAPI request to update the datacalass of a Project\nlet request = UpdateProjectDataClassRequest {\n    project_id: \"&lt;project-id&gt;\".to_string(),\n    data_class: DataClass::Public as i32,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.update_project_data_class(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the licenses of a Project\nlet request = UpdateProjectLicensesRequest {\n    project_id: \"&lt;project-id&gt;\".to_string(),\n    metadata_license_tag: \"CC0\".to_string(),\n    default_data_license_tag: \"CC0\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.update_project_licenses(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add an author to a Project\nlet request = UpdateProjectAuthorsRequest {\n    project_id: \"&lt;project-id&gt;\".to_string(),\n    add_authors: vec![Author {\n        first_name: \"John\".to_string(),\n        last_name: \"Doe\".to_string(),\n        email: \"john.doe@example.com\".to_string(),\n        orcid: \"0000-0002-1825-0097\".to_string(),\n        id: \"&lt;user-id-if-registered&gt;\".to_string(),\n    }],\n    remove_authors: vec![],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.update_project_authors(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the name of a Project\nrequest = UpdateProjectNameRequest(\n    project_id=\"&lt;project-id&gt;\",\n    name=\"updated-python-api-project\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.UpdateProjectName(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the title of a Project\nrequest = UpdateProjectNameRequest(\n    project_id=\"&lt;project-id&gt;\",\n    title=\"Updated Python API Project\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.UpdateProjectTitle(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the description of a Project\nrequest = UpdateProjectDescriptionRequest(\n    project_id=\"&lt;project-id&gt;\",\n    description=\"Updated with the gRPC Python API client\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.UpdateProjectDescription(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the key-values associated with a Project\nrequest = UpdateProjectKeyValuesRequest(\n    project_id=\"&lt;project-id&gt;\",\n    add_key_values=[],\n    remove_key_values=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.UpdateProjectKeyValues(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <p>Info</p> <p>Dataclass can only be relaxed: <code>Confidential</code> &gt; <code>Private</code> &gt; <code>Public</code></p> <pre><code># Create tonic/ArunaAPI request to update the data class of a Project\nrequest = UpdateProjectDataClassRequest(\n    project_id=\"&lt;project-id&gt;\",\n    data_class=DataClass.DATA_CLASS_PUBLIC\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.UpdateProjectDataClass(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the licenses of a Project\nrequest = UpdateProjectLicensesRequest(\n    project_id=\"&lt;project-id&gt;\",\n    metadata_license_tag=\"CC0\",\n    default_data_license_tag=\"CC0\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.UpdateProjectLicenses(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add an author to a Project\nrequest = UpdateProjectAuthorsRequest(\n    project_id=\"&lt;project-id&gt;\",\n    add_authors=[Author(\n        first_name=\"John\",\n        last_name=\"Doe\",\n        email=\"john.doe@example.com\",\n        orcid=\"0000-0002-1825-0097\",\n        user_id=\"&lt;user-id-if-registered\"\n    )],\n    remove_authors=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.UpdateProjectAuthors(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Project/#archive-project","title":"Archive Project","text":"<p>A Project can be archived which sets it and all the downstream relations to an immutable read-only state.</p> Required permissions <p>This request requires at least ADMIN permissions on the specific Project.</p>  cURL Rust Python <pre><code># Native JSON request to archive a Project\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/project/{project-id}/archive\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to archive a Project\nlet request = ArchiveProjectRequest {\n    project_id: \"&lt;project-id&gt;\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.archive_project(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to archive a Project\nrequest = UpdateProjectDescriptionRequest(\n    project_id=\"&lt;project-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.ArchiveProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Project/#delete-project","title":"Delete Project","text":"<p>API examples of how to delete a Project.</p> <p>Info</p> <p>Deletion does not remove the project from the database, but sets the status of the Project and the underlying resources to \"DELETED\".</p> Required permissions <p>This request requires at least ADMIN permissions on the specific Project.</p>  cURL Rust Python <pre><code># Native JSON request to delete a project\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/project/{project-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete a project\nlet request = DeleteProjectRequest {\n    project_id: \"&lt;project-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = project_client.delete_project(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a project\nrequest = DeleteProjectRequest(\n    project_id=\"&lt;project-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.project_client.DeleteProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Collections/","title":"How to use the Collection API / CollectionServiceClient","text":""},{"location":"get_started/basic_usage/05_How-To-Collections/#introduction","title":"Introduction","text":"<p>Collections are the second-level (and therefore optional) resource to organize stored data i.e. Objects in Projects.  Before you can create Collections you need to create a Project in Aruna.</p> <p>If you don't know how to create a Project you should read the previous chapter about the Project API basics.</p>"},{"location":"get_started/basic_usage/05_How-To-Collections/#create-collection","title":"Create Collection","text":"<p>API example for creating a new Collection.</p> Required permissions <p>This request requires at least APPEND permission on the Project in which the Collection is to be created.</p> <p>Collection naming guidelines</p> <ul> <li>Collection and Dataset names are restricted to the safe characters specified in the S3 object key naming guidelines</li> </ul>  cURL Rust Python <pre><code># Native JSON request to create a simple Collection\ncurl -d '\n  {\n    \"name\": \"json-api-collection\", \n    \"title\": \"JSON API Collection\"\n    \"description\": \"Created with JSON over HTTP.\",\n    \"keyValues\": [],\n    \"relations\": [],\n    \"data_class\": \"DATA_CLASS_PUBLIC\",\n    \"projectId\": \"&lt;project-id&gt;\",\n    \"metadataLicenseTag\": \"CC-BY-4.0\",\n    \"defaultDataLicenseTag\": \"CC-BY-4.0\",\n    \"authors\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a Collection\nlet request = CreateCollectionRequest {\n    name: \"rust-api-collection\".to_string(),\n    title: \"Rust API Collection\".to_string(),\n    description: \"Created with the gRPC Rust API client.\".to_string(),\n    key_values: vec![],\n    relations: vec![],\n    data_class: DataClass::Public as i32,\n    metadata_license_tag: Some(\"CC-BY-4.0\".to_string()),\n    default_data_license_tag: Some(\"CC-BY-4.0\".to_string()),\n    parent: Some(Parent::ProjectId(\"&lt;project-id&gt;\".to_string())),\n    authors: vec![],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.create_collection(request)\n                             .await\n                             .unwrap() \n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a new Collection\nrequest = CreateCollectionRequest(\n    name=\"python-api-collection\",\n    description=\"Created with the gRPC Python API client.\",\n    key_values=[], \n    relations=[], \n    data_class=DataClass.DATA_CLASS_PUBLIC,\n    project_id=\"&lt;project-id&gt;\",\n    metadata_license_tag=\"CC-BY-4.0\",\n    default_data_license_tag=\"CC-BY-4.0\",\n    authors=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.CreateCollection(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Collections/#get-collections","title":"Get Collection(s)","text":"<p>API examples of how to fetch information for one or multiple existing Collections.</p> Required permissions <p>This request requires at least READ permissions on the Collection or a parent Project</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of a collection\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}\n</code></pre> <pre><code># Native JSON request to fetch information of multiple Collections\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections?collectionIds={collection-id-01}&amp;collectionIds={collection-id-02}'\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of a collection\nlet request = GetCollectionRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.get_collection(request)\n                                .await\n                                .unwrap()\n                                .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of multiple Collections\nlet request = GetCollectionsRequest {\n    collection_ids: vec![\n        \"&lt;collection-id-01&gt;\".to_string(),\n        \"&lt;collection-id-02&gt;\".to_string(),\n        \"&lt;...&gt;\".to_string(),\n    ],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.get_collections(request)\n                                .await\n                                .unwrap()\n                                .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of a Collection\nrequest = GetCollectionRequest(\n    collection_id=\"&lt;collection-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.GetCollection(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of multiple Collections\nrequest = GetCollectionsRequest(\n    collection_ids=[\n        \"&lt;collection-id-01&gt;\",\n        \"&lt;collection-id-02&gt;\",\n        \"&lt;...&gt;\"]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.GetCollections(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Collections/#update-collection","title":"Update Collection","text":"<p>API examples of how to update individual metadata of an existing Collection.</p> Required permissions <ul> <li>Name update needs at least WRITE permissions on the specific Collection or a parent Project</li> <li>Description update needs at least WRITE permissions on the specific Collection or a parent Project</li> <li>KeyValue update needs at least WRITE permissions on the specific Collection or a parent Project</li> <li>Dataclass update needs at least WRITE permissions on the specific Collection or a parent Project</li> <li>License update needs at least WRITE permissions on the specific Collection or a parent Project</li> </ul>  cURL Rust Python <pre><code># Native JSON request to update the name of a Collection\ncurl -d '\n  {\n    \"name\": \"updated-json-api-collection\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}/name\n</code></pre> <pre><code># Native JSON request to update the title of a Collection\ncurl -d '\n  {\n    \"name\": \"Updated JSON API Collection\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}/title\n</code></pre> <pre><code># Native JSON request to update the description of a Collection\ncurl -d '\n  {\n    \"description\": \"Updated with JSON over HTTP.\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}/description\n</code></pre> <pre><code># Native JSON request to update the key-values associated with a Collection\ncurl -d '\n  {\n    \"addKeyValues\": [],\n    \"removeKeyValues\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}/key_values\n</code></pre> <p>Info</p> <p>Dataclass can only be relaxed: <code>Confidential</code> &gt; <code>Workspace</code> &gt; <code>Private</code> &gt; <code>Public</code></p> <pre><code># Native JSON request to update the dataclass of a Collection\ncurl -d '\n  {\n    \"dataClass\": \"DATA_CLASS_PUBLIC\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}/data_class\n</code></pre> <pre><code># Native JSON request to update the license of a Collection\ncurl -d '\n  {\n    \"metadataLicenseTag\": \"CC0\",\n    \"defaultDataLicenseTag\": \"CC0\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}/licenses\n</code></pre> <pre><code># Native JSON request to add an author to a Collection\ncurl -d '\n  {\n    \"addAuthors\": [\n        {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"orcid\": \"0000-0002-1825-0097\",\n        \"id\": \"&lt;user-id-if-registered&gt;\"\n        }\n    ],\n    \"removeAuthors\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}/authors\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the name of a Collection\nlet request = UpdateCollectionNameRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string(),\n    name: \"updated-rust-api-collection\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.update_collection_name(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the title of a Collection\nlet request = UpdateCollectionTitleRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string(),\n    title: \"Updated Rust API Collection\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.update_collection_title(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the description of a Collection\nlet request = UpdateCollectionDescriptionRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string(),\n    description: \"Updated with the gRPC Rust API client.\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.update_collection_description(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the key-values associated with a Collection\nlet request = UpdateCollectionKeyValuesRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string(),\n    add_key_values: vec![], \n    remove_key_values: vec![]\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.update_collection_key_values(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <p>Info</p> <p>Dataclass can only be relaxed: <code>Confidential</code> &gt; <code>Private</code> &gt; <code>Public</code></p> <pre><code>// Create tonic/ArunaAPI request to update the datacalass of a Collection\nlet request = UpdateCollectionDataClassRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string(),\n    data_class: DataClass::Public as i32,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.update_collection_data_class(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the license of a Collection\nlet request = UpdateCollectionLicensesRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string(),\n    metadata_license_tag: \"CC0\".to_string(),\n    default_data_license_tag: \"CC0\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.update_collection_licenses(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add an author to a Collection\nlet request = UpdateCollectionAuthorsRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string(),\n    add_authors: vec![Author {\n        first_name: \"John\".to_string(),\n        last_name: \"Doe\".to_string(),\n        email: \"john.doe@example.com\".to_string(),\n        orcid: \"0000-0002-1825-0097\".to_string(),\n        id: \"&lt;user-id-if-registered&gt;\".to_string(),\n    }],\n    remove_authors: vec![],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.update_collection_authors(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the name of a Collection\nrequest = UpdateCollectionNameRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    name=\"updated-python-api-collection\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.UpdateCollectionName(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the title of a Collection\nrequest = UpdateCollectionTitleRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    title=\"Updated Python API Collection\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.UpdateCollectionTitle(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the description of a Collection\nrequest = UpdateCollectionDescriptionRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    description=\"Updated with the gRPC Python API client\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.UpdateCollectionDescription(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <p>Warning</p> <p>Removal of KeyValues always triggers the creation of a new object revision.</p> <pre><code># Create tonic/ArunaAPI request to update the key-values associated with a Collection\nrequest = UpdateCollectionKeyValuesRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    add_key_values=[],\n    remove_key_values=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.UpdateCollectionKeyValues(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <p>Info</p> <p>Dataclass can only be relaxed: <code>Confidential</code> &gt; <code>Private</code> &gt; <code>Public</code></p> <pre><code># Create tonic/ArunaAPI request to relax the data_class of a Collection\nrequest = UpdateCollectionDescriptionRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    data_class=DataClass.DATA_CLASS_PUBLIC\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.UpdateCollectionDataClass(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the licenses of a Collection\nrequest = UpdateCollectionLicensesRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    metadata_license_tag=\"CC0\",\n    default_data_license_tag=\"CC0\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.UpdateCollectionLicenses(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add an author to a Collection\nrequest = UpdateCollectionAuthorsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    add_authors=[Author(\n        first_name=\"John\",\n        last_name=\"Doe\",\n        email=\"john.doe@example.com\",\n        orcid=\"0000-0002-1825-0097\",\n        user_id=\"&lt;user-id-if-registered\"\n    )],\n    remove_authors=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.UpdateCollectionAuthors(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Collections/#snapshot-collection","title":"Snapshot Collection","text":"<p>API examples of how to snapshot a Collection, i.e. create an immutable clone of the Collection and its underlying resources.</p> Required permissions <p>This request requires at least ADMIN permissions on the Collection or the Project under which the collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request request to snapshot a Collection\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n  -H 'Content-Type: application/json' \\\n  -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}/snapshot\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to snapshot a Collection\nlet request = SnapshotCollectionRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.snapshot_collection_version(request)\n                                .await\n                                .unwrap()\n                                .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to snapshot a Collection\nrequest = SnapshotCollectionRequest(\n    collection_id=\"&lt;collection-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.SnapshotCollectionVersion(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Collections/#delete-collection","title":"Delete Collection","text":"<p>API examples of how to delete a Collection.</p> <p>Info</p> <p>Deletion does not remove the Collection from the database, but sets the status of the Collection and the underlying resources to \"DELETED\".</p> Required permissions <p>This request requires at least ADMIN permissions on the Collection or the Project under which the collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to delete a Collection\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/collections/{collection-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete a Collection\nlet request = DeleteCollectionRequest {\n    collection_id: \"&lt;collection-id&gt;\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = collection_client.delete_collection(request)\n                                .await\n                                .unwrap()\n                                .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a collection\nrequest = DeleteCollectionRequest(\n    collection_id=\"&lt;collection-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.collection_client.DeleteCollection(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/06_How-To-Datasets/","title":"How to use the Dataset API / DatasetServiceClient","text":""},{"location":"get_started/basic_usage/06_How-To-Datasets/#introduction","title":"Introduction","text":"<p>Datasets are the third-level (and therefore also optional) resource to organize stored data. Hence, they need at least a Project or a Collection as parent for their creation.  Datasets should be used to group objects that are closely related to each other into a logical unit and to describe them with additional metadata.</p> <p>If you don't know how to create a Project you should read the previous chapter about the Project API basics.</p> <p>If you don't know how to create a Collection you should read the previous chapter about the Collection API basics which is eerily similar to the Project API.</p>"},{"location":"get_started/basic_usage/06_How-To-Datasets/#create-dataset","title":"Create Dataset","text":"<p>API example for creating a new Dataset.</p> Required permissions <p>This request requires at least APPEND permission on the parent resource in which the Dataset is to be created.</p> <p>Dataset naming guidelines</p> <ul> <li>Collection and Dataset names are restricted to the safe characters specified in the S3 object key naming guidelines</li> </ul>  cURL Rust Python <pre><code># Native JSON request to create a simple Dataset\ncurl -d '\n  {\n    \"name\": \"json-api-dataset\", \n    \"title\": \"JSON API Dataset\",\n    \"description\": \"Created with JSON over HTTP.\",\n    \"keyValues\": [],\n    \"relations\": [],\n    \"data_class\": \"DATA_CLASS_PUBLIC\",\n    \"projectId\": \"&lt;project-id&gt;\",\n    \"collectionId\": \"&lt;dataset-id&gt;\",\n    \"metadataLicenseTag\": \"CC-BY-4.0\",\n    \"defaultDataLicenseTag\": \"CC-BY-4.0\",\n    \"authors\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a Dataset\nlet request = CreateDatasetRequest {\n    name: \"rust-api-dataset\".to_string(),\n    title: \"Rust API Dataset\".to_string(),\n    description: \"Created with the gRPC Rust API client.\".to_string(),\n    key_values: vec![],\n    external_relations: vec![],\n    data_class: DataClass::Public as i32,\n    metadata_license_tag: Some(\"CC-BY-4.0\".to_string()),\n    default_data_license_tag: Some(\"CC-BY-4.0\".to_string()),\n    parent: Some(Parent::ProjectId(\"&lt;project-id&gt;\".to_string())),\n    authors: vec![]\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.create_dataset(request)\n                             .await\n                             .unwrap() \n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a new Dataset\nrequest = CreateDatasetRequest(\n    name=\"python-api-project\",\n    title=\"Python API Project\",\n    description=\"Created with the gRPC Python API client.\",\n    key_values=[], \n    external_relations=[], \n    data_class=DataClass.DATA_CLASS_PUBLIC,\n    project_id=\"&lt;project-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    metadata_license_tag=\"CC-BY-4.0\",\n    default_data_license_tag=\"CC-BY-4.0\",\n    authors=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.CreateDataset(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/06_How-To-Datasets/#get-datasets","title":"Get Dataset(s)","text":"<p>API examples of how to fetch information for one or multiple existing Dataset(s).</p> Required permissions <p>This request requires at least READ permissions on the Dataset or one if its parent resources.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of a Dataset\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets/{dataset-id}'\n</code></pre> <pre><code># Native JSON request to fetch information of multiple Datasets\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets?datasetIds=dataset-id-01&amp;datasetIds=dataset-id-02'\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of a Dataset\nlet request = GetDatasetRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.get_dataset(request)\n                                .await\n                                .unwrap()\n                                .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of multiple Datasets\nlet request = GetDatasetsRequest {\n    dataset_ids: vec![\n        \"&lt;dataset-id-01&gt;\".to_string(),\n        \"&lt;dataset-id-02&gt;\".to_string(),\n        \"&lt;...&gt;\".to_string(),\n    ],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.get_datasets(request)\n                                .await\n                                .unwrap()\n                                .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of a Dataset\nrequest = GetDatasetRequest(\n    dataset_id=\"&lt;dataset-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.GetDataset(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of multiple Datasets\nrequest = GetDatasetsRequest(\n    dataset_ids=[\n        \"&lt;dataset-id-01&gt;\",\n        \"&lt;dataset-id-02&gt;\",\n        \"&lt;...&gt;\"]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.GetDatasets(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/06_How-To-Datasets/#update-dataset","title":"Update Dataset","text":"<p>API examples of how to update individual metadata of an existing Dataset.</p> Required permissions <ul> <li>Name update needs at least WRITE permissions on the specific Dataset or one of its parent resources</li> <li>Description update needs at least WRITE permissions on the specific Dataset or one of its parent resources</li> <li>KeyValue update needs at least WRITE permissions on the specific Dataset or one of its parent resources</li> <li>Dataclass update needs at least WRITE permissions on the specific Dataset or one of its parent resources</li> </ul>  cURL Rust Python <pre><code># Native JSON request to update the name of a Dataset\ncurl -d '\n  {\n    \"name\": \"updated-json-api-dataset\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets/{dataset-id}/name\n</code></pre> <pre><code># Native JSON request to update the title of a Dataset\ncurl -d '\n  {\n    \"title\": \"Updated JSON API Dataset\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets/{dataset-id}/title\n</code></pre> <pre><code># Native JSON request to update the description of a Dataset\ncurl -d '\n  {\n    \"description\": \"Updated with JSON over HTTP.\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets/{dataset-id}/description\n</code></pre> <pre><code># Native JSON request to update the key-values associated with a Dataset\ncurl -d '\n  {\n    \"addKeyValues\": [],\n    \"removeKeyValues\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets/{dataset-id}/key_values\n</code></pre> <p>Info</p> <p>Dataclass can only be relaxed: <code>Confidential</code> &gt; <code>Workspace</code> &gt; <code>Private</code> &gt; <code>Public</code></p> <pre><code># Native JSON request to update the dataclass of a Dataset\ncurl -d '\n  {\n    \"dataClass\": \"DATA_CLASS_PUBLIC\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets/{dataset-id}/data_class\n</code></pre> <pre><code># Native JSON request to update the license of a Dataset\ncurl -d '\n  {\n    \"metadataLicenseTag\": \"CC0\",\n    \"defaultDataLicenseTag\": \"CC0\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets/{dataset-id}/licenses\n</code></pre> <pre><code># Native JSON request to add an author to a Dataset\ncurl -d '\n  {\n    \"addAuthors\": [\n        {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"orcid\": \"0000-0002-1825-0097\",\n        \"id\": \"&lt;user-id-if-registered&gt;\"\n        }\n    ],\n    \"removeAuthors\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/dataset/{collection-id}/authors\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the name of a Dataset\nlet request = UpdateDatasetNameRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string(),\n    name: \"updated-rust-api-dataset\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.update_dataset_name(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the title of a Dataset\nlet request = UpdateDatasetTitleRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string(),\n    title: \"Updated Rust API Dataset\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.update_dataset_title(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the description of a Dataset\nlet request = UpdateDatasetDescriptionRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string(),\n    description: \"Updated with the gRPC Rust API client.\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.update_dataset_description(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the key-values associated with a Dataset\nlet request = UpdateDatasetKeyValuesRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string(),\n    add_key_values: vec![], \n    remove_key_values: vec![]\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.update_dataset_key_values(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <p>Info</p> <p>Dataclass can only be relaxed: <code>Confidential</code> &gt; <code>Private</code> &gt; <code>Public</code></p> <pre><code>// Create tonic/ArunaAPI request to update the datacalass of a Dataset\nlet request = UpdateDatasetDataClassRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string(),\n    data_class: DataClass::Public as i32,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.update_dataset_data_class(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the licenses of a Dataset\nlet request = UpdateDatasetLicensesRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string(),\n    metadata_license_tag: \"CC0\".to_string(),\n    default_data_license_tag: \"CC0\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.update_dataset_licenses(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add an author to a Dataset\nlet request = UpdateDatasetAuthorsRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string(),\n    add_authors: vec![Author {\n        first_name: \"John\".to_string(),\n        last_name: \"Doe\".to_string(),\n        email: \"john.doe@example.com\".to_string(),\n        orcid: \"0000-0002-1825-0097\".to_string(),\n        id: \"&lt;user-id-if-registered&gt;\".to_string(),\n    }],\n    remove_authors: vec![],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.update_dataset_authors(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the name of a Dataset\nrequest = UpdateDatasetNameRequest(\n    dataset_id=\"&lt;dataset-id&gt;\",\n    name=\"updated-python-api-project\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.UpdateDatasetName(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the title of a Dataset\nrequest = UpdateDatasetTitleRequest(\n    dataset_id=\"&lt;dataset-id&gt;\",\n    title=\"Updated Python API Dataset\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.UpdateDatasetTitle(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the description of a Dataset\nrequest = UpdateDatasetDescriptionRequest(\n    dataset_id=\"&lt;dataset-id&gt;\",\n    description=\"Updated with the gRPC Python API client\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.UpdateDatasetDescription(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the key-values associated with a Dataset\nrequest = UpdateDatasetKeyValuesRequest(\n    dataset_id=\"&lt;dataset-id&gt;\",\n    add_key_values=[],\n    remove_key_values=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.UpdateDatasetKeyValues(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <p>Info</p> <p>Dataclass can only be relaxed: <code>Confidential</code> &gt; <code>Private</code> &gt; <code>Public</code></p> <pre><code># Create tonic/ArunaAPI request to relax the data_class of a Dataset\nrequest = UpdateDatasetDataClassRequest(\n    dataset_id=\"&lt;dataset-id&gt;\",\n    data_class=DataClass.DATA_CLASS_PUBLIC\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.UpdateDatasetDataClass(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the licenses of a Dataset\nrequest = UpdateDatasetLicensesRequest(\n    dataset_id=\"&lt;dataset-id&gt;\",\n    metadata_license_tag=\"CC0\",\n    default_data_license_tag=\"CC0\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.UpdateDatasetLicenses(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add an author to a Dataset\nrequest = UpdateDatasetAuthorsRequest(\n    dataset_id=\"&lt;dataset-id&gt;\",\n    add_authors=[Author(\n        first_name=\"John\",\n        last_name=\"Doe\",\n        email=\"john.doe@example.com\",\n        orcid=\"0000-0002-1825-0097\",\n        user_id=\"&lt;user-id-if-registered\"\n    )],\n    remove_authors=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.UpdateDatasetAuthors(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/06_How-To-Datasets/#snapshot-dataset","title":"Snapshot Dataset","text":"<p>API examples of how to snapshot a Dataset, i.e. create an immutable clone of the Dataset and its underlying resources.</p> Required permissions <p>This request requires at least ADMIN permissions on the Dataset or one if its parent resources.</p>  cURL Rust Python <pre><code># Native JSON request to snapshot a Dataset\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n  -H 'Content-Type: application/json' \\\n  -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets/{dataset-id}/snapshot\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to snapshot a Dataset\nlet request = SnapshotDatasetRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.snapshot_dataset_version(request)\n                                .await\n                                .unwrap()\n                                .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to snapshot a Dataset\nrequest = SnapshotDatasetRequest(\n    dataset_id=\"&lt;dataset-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.SnapshotDatasetVersion(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/06_How-To-Datasets/#delete-dataset","title":"Delete Dataset","text":"<p>API examples of how to delete a Dataset.</p> <p>Info</p> <p>Deletion does not remove the Dataset from the database, but sets the status of the Dataset and the underlying resources to \"DELETED\".</p> Required permissions <p>This request requires at least ADMIN permissions on the Dataset or one if its parent resources.</p>  cURL Rust Python <pre><code># Native JSON request to delete a Dataset\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/datasets/{dataset-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete a Dataset\nlet request = DeleteDatasetRequest {\n    dataset_id: \"&lt;dataset-id&gt;\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = dataset_client.delete_dataset(request)\n                                .await\n                                .unwrap()\n                                .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a Dataset\nrequest = DeleteDatasetRequest(\n    dataset_id=\"&lt;dataset-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.DeleteDataset(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/","title":"How to use the Object API / ObjectServiceClient","text":""},{"location":"get_started/basic_usage/07_How-To-Objects/#introduction","title":"Introduction","text":"<p>Objects are the primary resource to actually hold the data you upload. </p> <p>In any case, Objects need at least a Project that acts as the root of their hierarchy. However, this project does not have to be the direct parent, but objects can also be attached below a collection or a dataset by specifying the latter as the parent during creation.</p> <p>If you don't know how to create other hierarchical resources you should read the previous chapters on how to use the Project API, Collection API and/or Dataset API.</p>"},{"location":"get_started/basic_usage/07_How-To-Objects/#initialize-object","title":"Initialize Object","text":"<p>The first step is to initialize an Object. This creates an Object in Aruna with a status of Initializing which marks it as a Staging Object. As long as an Object is in the staging area data can be uploaded to it.</p> Hash validation <p>If you provide a SHA256 and/or MD5 hash with the initializing of an Object it will be automatically validated by  the DataProxy after the data upload has been finished. This ensures that the upload was successful and complete. </p> Required permissions <p>This request requires at least APPEND permission on the parent resource in which the Object is to be created.</p> <p>Info</p> <ul> <li>Names are unique within each hierarchy (e.g. you cannot create Objects with the same name inside the same Collection)</li> </ul>  cURL Rust Python <pre><code># Native JSON request to create a new Object\ncurl -d '\n  {\n    \"name\": \"aruna.png\",\n    \"title\": \"Aruna Logo\",\n    \"description\": \"My demo Object\",\n    \"keyValues\": [],\n    \"relations\": [],\n    \"dataClass\": \"DATA_CLASS_PUBLIC\",\n    \"projectId\": \"&lt;project-id&gt;\",\n    \"collectionId\": \"&lt;collection-id&gt;\",\n    \"datasetId\": \"&lt;dataset-id&gt;\",\n    \"hashes\": [\n        {\n        \"alg\": \"HASHALGORITHM_SHA256\",\n        \"hash\": \"5839942d4f1e706fee33d0837617163f9368274a72b2b7e89d3b0877f390fc33\"\n        }\n    ],\n    \"metadataLicenseTag\": \"CC-BY-4.0\",\n    \"dataLicenseTag\": \"CC-BY-4.0\",\n    \"authors\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a new Object\nlet request = CreateObjectRequest {\n    name: \"aruna.png\".to_string(),\n    title: \"Aruna Logo\".to_string(),\n    description: \"My demo Object\".to_string(),\n    key_values: vec![],\n    relations: vec![],\n    data_class: DataClass::Public as i32,\n    hashes: vec![Hash {\n        alg: Hashalgorithm::Sha256 as i32,\n        hash: \"5839942d4f1e706fee33d0837617163f9368274a72b2b7e89d3b0877f390fc33\".to_string(),\n    }],\n    metadata_license_tag: \"CC-BY-4.0\".to_string(),\n    data_license_tag: \"CC-BY-4.0\".to_string(),\n    parent: Some(Parent::ProjectId(\"&lt;project-id&gt;\".to_string())),\n    authors: vec![],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.create_object(init_request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a new Object\nrequest = CreateObjectRequest(\n    name=\"aruna.png\",\n    title=\"Aruna Logo\",\n    description=\"My demo Object\",\n    key_values=[],\n    external_relations=[],\n    data_class=DataClass.DATA_CLASS_PUBLIC,\n    project_id=\"&lt;project-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    dataset_id=\"&lt;dataset-id&gt;\",\n    hashes=[Hash(\n        alg=Hashalgorithm.HASHALGORITHM_SHA256,\n        hash=\"5839942d4f1e706fee33d0837617163f9368274a72b2b7e89d3b0877f390fc33\"\n    )],\n    metadata_license_tag=\"CC-BY-4.0\",\n    data_license_tag=\"CC-BY-4.0\",\n    authors=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.CreateObject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/#upload-data-to-a-staging-object","title":"Upload data to a Staging Object","text":"<p>After initializing an Object you can request an upload url with the object id you received from the initialization. Data then can be uploaded through the received url to the Aruna DataProxy.</p> <p>If the data associated with the Object is greater than 5 Gigabytes you have to request a multipart upload and chunk your data in parts which are at most 5 Gigabytes in size. You also have to request an upload url for each part individually.</p> <p>S3 Presigned download URL</p> <p>You can also generate presigned URLs on your own for the specific Aruna DataPoxy you want to upload the Object data to.</p> Required permissions <p>Requesting an upload URL needs at least APPEND permissions on the Object's Collection or the Project under which the Collection is registered.</p>"},{"location":"get_started/basic_usage/07_How-To-Objects/#single-part-upload","title":"Single part upload","text":"<p>Info</p> <p>Single part upload automatically starts the finishing process of the respective Object once the upload has been finished to make it available.</p>  cURL Rust Python <pre><code># Native JSON request to request an upload url for single part upload\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id}/upload\n\n# Native JSON request to upload single part data through the generated DataProxy upload url\ncurl -X PUT -T &lt;path-to-local-file&gt; &lt;upload-url&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to request an upload url for single part upload\nlet get_request = GetUploadUrlRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    multipart: false,\n    part_number: 1,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.get_upload_url(request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\nlet upload_url = response.url;\n\n// Upload local file to the generated upload URL\nlet path = Path::new(\"/path/to/local/file\");\nlet file = std::fs::File::open(path).await.unwrap();\n\nlet client = reqwest::Client::new();\nlet stream = FramedRead::new(file, BytesCodec::new());\nlet body   = Body::wrap_stream(stream);\n\n// Send the request to the upload url\nlet response = client.put(upload_url)\n                     .body(body)\n                     .send()\n                     .await\n                     .unwrap();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to request an upload url for single part upload\nrequest = GetUploadURLRequest(\n    object_id=\"&lt;object-id&gt;\",\n    multipart=False,\n    part_number=1\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.GetUploadURL(request=request)\n\n# Do something with the response\nprint(f'{response}')\nupload_url = response.url\n\n# Upload local file to the generated upload URL\nfile_path = \"/path/to/local/file\"\nheaders = {'Content-type': 'application/octet-stream'}\nupload_response = requests.put(upload_url, data=open(file_path, 'rb'), headers=headers)\n\n# Do something with the response\nprint(f'{upload_response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/#multipart-upload","title":"Multipart upload","text":"<p>For each uploaded part of the multipart upload you will receive a so called <code>ETag</code> in the response header which has to be saved with the correlating part number for the Object finishing.</p> <p>Numbers of upload parts start with 1, not 0.</p> <p>Multipart uploads have to be finished manually as the DataProxy cannot know or guess how many parts will be uploaded in total.</p> <p>Tip</p> <p>Upload of parts from multipart upload can be uploaded parallel.</p> <p>Warning</p> <p>If the data is stored in an S3 endpoint individual parts of multipart upload have to be at least 5MiB in size (5242880 bytes) or the Object finishing will fail. This limitation is part of the official S3 multipart upload specification.</p>  cURL Rust Python <pre><code># Native JSON request to request an upload url for specific part of multipart upload\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id}/upload?multipart=true&amp;partNumber=&lt;part-number&gt;'\n\n# Upload multipart data with native JSON requests through the generated DataProxy upload urls\ncurl -X PUT -T &lt;path-to-local-file&gt; &lt;upload-url&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI to request an upload url for specific part of multipart upload\nlet request = GetUploadUrlRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    multipart: true,\n    part_number: &lt;part-number&gt; as i32,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.get_upload_url(request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to request an upload url for specific part of multipart upload\nrequest = GetUploadURLRequest(\n    object_id=\"&lt;object-id&gt;\",\n    multipart=True,\n    part_number=&lt;part-number&gt;\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.GetUploadURL(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/#multipart-upload-example","title":"Multipart upload example","text":"cURL Rust Python <pre><code>OBJECT_ID=&lt;staging-object-id&gt;\n\n# Loop over all file parts, request an upload url, upload the data and display ETag with its part number\nfor i in \"Dummy_Archive.tar.gz.aa\",1 \"Dummy_Archive.tar.gz.ab\",2 \"Dummy_Archive.tar.gz.ac\",3 \"Dummy_Archive.tar.gz.ad\",4; \n  do IFS=\",\"; # Split input at comma\n  set -- $i;  # Convert the \"tuple\" into the param args $1 $2 ...\n    PART_FILE=$1\n    PART_NUM=$2\n\n    UPLOAD_URL=$(curl -s -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n                         -H 'Content-Type: application/json' \\\n                         -X GET \"https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/${OBJECT_ID}/upload?multipart=true&amp;partNumber=${PART_NUM}\" | jq -r '.url')\n    ETAG=$(curl -X PUT -T ${PART_FILE} -i \"${UPLOAD_URL}\" | grep etag)\n\n    echo -e \"\\nPart: ${PART_NUM}, ETag: ${ETAG}\\n\"\ndone\n</code></pre> <pre><code>let mut file = tokio::fs::File::open(\"/path/to/local/file\").await.unwrap();     // File handle\nlet mut remaining_bytes: usize = file.metadata().await.unwrap().len() as usize; // File size in bytes\nlet mut upload_part_counter: i64 = 0; \nlet mut completed_parts: Vec&lt;CompletedPart&gt; = Vec::new();\n\nconst UPLOAD_BUFFER_SIZE: usize = 1024 * 1024 * 50; // 50MiB chunks\nlet mut buffer_size = UPLOAD_BUFFER_SIZE;           // Variable buffer size for loop\n\nloop {\n    // Increment part number\n    upload_part_counter += 1;\n\n    // Set buffer size\n    if remaining_bytes &lt; UPLOAD_BUFFER_SIZE {\n        buffer_size = remaining_bytes;\n    }\n\n    // Fill buffer with bytes from file\n    let mut data_buf = vec![0u8; buffer_size];\n    let successful_read = file.read_exact(&amp;mut data_buf).await;\n\n    match successful_read {\n        Ok(bytes) =&gt; bytes,\n        Err(_) =&gt; file.read_to_end(&amp;mut data_buf).await.unwrap(),\n    };\n\n    // Create tonic/ArunaAPI request to request an upload url for multipart upload part\n    let upload_url = object_client\n        .get_upload_url(GetUploadUrlRequest {\n            object_id: object_id.to_string(),\n            multipart: true,\n            part_number: upload_part_counter as i32,\n        })\n        .await\n        .unwrap()\n        .into_inner()\n        .url;\n\n    // Upload buffer content to upload url and parse ETag from response header\n    let client   = reqwest::Client::new();\n    let response = client.put(upload_url).body(data_buf).send().await.unwrap();\n    let etag_raw = response.headers().get(\"ETag\").unwrap().as_bytes();\n    let etag     = std::str::from_utf8(etag_raw).unwrap().to_string();\n\n    // Collect ETag with corresponding part number\n    completed_parts.push(CompletedPart {\n        etag: etag,\n        part: upload_part_counter,\n    });\n\n    // Update the amount of remaining bytes for the next loop\n    remaining_bytes -= buffer_size;\n    if remaining_bytes == 0 {\n        break;\n    }\n}\n\n// Retain the completed parts for usage in the FinishObjectRequest\nprintln!(\"{:#?}\", completed_parts);\n</code></pre> <pre><code>CHUNK_SIZE = 1024 * 1024 * 50;  # 50MiB chunks\n\nfile_path = \"/path/to/local/file\"\nheaders = {'Content-type': 'application/octet-stream'}  # Arbitrary binary data upload\ncompleted_parts = []\n\n# Open file and return a stream\nwith open(file_path, 'rb') as file_in:\n    for i, data_chunk in enumerate(read_file_chunks(file_in, CHUNK_SIZE)):  # (1)\n        # Create tonic/ArunaAPI request to request an upload url for multipart upload part\n        get_request = GetUploadURLRequest(\n            object_id=\"&lt;object-id&gt;\",\n            multipart=True,\n            part_number=i+1\n        )\n\n        # Send the request to the Aruna instance gRPC endpoint\n        get_response = client.object_client.GetUploadURL(request=get_request)\n\n        # Extraxt download url from response\n        upload_url = get_response.url\n\n        # Upload file content chunk to upload url\n        upload_response = requests.put(upload_url, data=data_chunk, headers=headers)\n\n        # Parse ETag from response header\n        etag = str(upload_response.headers[\"etag\"].replace(\"\\\"\", \"\"))\n\n        # Collect ETag with corresponding part number\n        completed_parts.append(\n            CompletedPart(\n                etag=etag,\n                part=i+1\n            )\n        )\n\n# Retain the completed parts for usage in the FinishObjectRequest\nprint(f'{completed_parts}')\n</code></pre> <ol> <li>This function returns a generator with byte chunks of the specified file: <pre><code>    def read_file_chunks(file_object, chunk_size=5242880):\n    \"\"\"\n    Generator to read set chunk sizes of a file object.\n    Args:\n        file_object: Open file handle\n        chunk_size: Size of chunk to read (Default: 5MiB)\n\n    Returns: Generator with file content bytes in chunk size\n    \"\"\"\n    while True:\n        data = file_object.read(chunk_size)\n        if not data:\n            break\n        yield data\n</code></pre></li> </ol>"},{"location":"get_started/basic_usage/07_How-To-Objects/#finish-object","title":"Finish Object","text":"<p>Finishing the Object transfers it from the staging area into production i.e. makes it available. From this moment the Object is generally available for other functions than Get Object. On success the response will contain the finished Object analog to the response content of a .</p> When to finish an Object? <p>Object finishing is only needed in the following cases:</p> <ul> <li>Object created/updated without upload</li> <li>Object created/updated with multipart upload</li> </ul> <p>Single part upload automatically starts the finishing process of the associated Object once the data upload has been finished and validated.</p> Object hashes <p>SHA256 and MD5 hash sums are always calculated automatically for the content of the object and added to the object, so they do not have to be explicitly specified when finishing. Currently Aruna only supports SHA256 and MD5 but the list can be extended if the demand arises.</p> <p>So, in the future further hashes of the object can be specified, which are also added to the object. However, these hashes are not validated against the content of the object.    </p> Required permissions <p>This request requires at least APPEND permission on the parent resource in which the Object is to be created.</p>  cURL Rust Python <pre><code># Native JSON request to finish a multipart upload Object\ncurl -d '\n  {\n    \"contentLen\": \"123456\",\n    \"hashes\": [\n      {\n        \"alg\": \"HASHALGORITHM_SHA256\",\n        \"hash\": \"5839942d4f1e706fee33d0837617163f9368274a72b2b7e89d3b0877f390fc33\"\n      }\n    ],\n    \"completedParts\": [\n      {\n        \"etag\": \"6bcf86bed8807b8e78f0fc6e0a53079d-1\",\n        \"part\": \"1\"\n      },\n      {\n        \"etag\": \"d41d8cd98f00b204e9800998ecf8427e-2\",\n        \"part\": \"2\"\n      }, \n      { ... }\n    ]\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id}/finish\n</code></pre> <pre><code>// Create tonic/ArunaAPI to finish a multipart upload Object\nlet request = FinishObjectStagingRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    content_len: 123456,\n    hashes: vec![\n        Hash {\n            alg: Hashalgorithm::Sha256 as i32,\n            hash: \"5839942d4f1e706fee33d0837617163f9368274a72b2b7e89d3b0877f390fc33\"\n                .to_string(),\n        },\n        // Other additional hashes can be added here\n    ],\n    completed_parts: vec![\n        CompletedPart {\n            etag: \"6bcf86bed8807b8e78f0fc6e0a53079d-1\".to_string(),\n            part: 1,\n        },\n        CompletedPart {\n            etag: \"d41d8cd98f00b204e9800998ecf8427e-2\".to_string(),\n            part: 2,\n        },\n        CompletedPart { ... }\n    ],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.finish_object_staging(request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI to finish a multipart upload Object\nrequest = FinishObjectStagingRequest(\n    object_id=\"&lt;object-id&gt;\",\n    content_len=123456\n    hashes=[Hash(\n        alg=Hashalgorithm.HASHALGORITHM_SHA256,\n        hash=\"5839942d4f1e706fee33d0837617163f9368274a72b2b7e89d3b0877f390fc33\"\n    )],\n    completed_parts=[\n        CompletedPart(\n            etag=\"6bcf86bed8807b8e78f0fc6e0a53079d-1\",\n            part=1\n        ),\n        CompletedPart(\n            etag=\"d41d8cd98f00b204e9800998ecf8427e-2\",\n            part=2\n        ),\n        CompletedPart( ... )\n    ],\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.FinishObjectStaging(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/#get-objects","title":"Get Object(s)","text":"<p>Fetch information on finished or staging Objects via their unique id.</p> <p>You can also fetch information on multiple Objects with a single request. In this case the permission requeirements apply to each Object individually.</p> Required permissions <p>This request requires at least READ permissions on the Object or one of its parent resources.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of a single Object\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id}\n</code></pre> <pre><code># Native JSON request to fetch information of multiple Objects in a single request\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects?objectIds={object-id-01}&amp;objectIds={object-id-02}'\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of a single Object\nlet request = GetObjectRequest {\n    object_id: \"&lt;object-id&gt;\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.get_object(request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of multiple Objects in a single request\nlet request = GetObjectsRequest {\n    object_ids: vec![\n        \"&lt;object-id-01&gt;\".to_string(),\n        \"&lt;object-id-02&gt;\".to_string(),\n        \"&lt;...&gt;\".to_string(),\n    ]\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.get_objects(request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to to fetch information of an object\nrequest = GetObjectRequest(\n    object_id=\"&lt;object-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.GetObject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to to fetch information of an object\nrequest = GetObjectsRequest(\n    object_ids=[\n        \"&lt;object-id-01&gt;\", \n        \"&lt;object-id-02&gt;\", \n        \"&lt;...&gt;\", \n    ]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.GetObjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/#download-object-data","title":"Download Object data","text":"<p>To download the data associated with an Object you have to request a download url. </p> <p>S3 Presigned download URL</p> <p>You can also generate presigned URLs on your own for the specific Aruna DataPoxy you want to download the Object data from. </p> Required permissions <p>This request requires at least READ permissions on the Object or one of its parent resources.</p>  cURL Rust Python <pre><code># Native JSON request to fetch the download URL of an Object\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id}/download\n\n# Download the data with the provided remote file name\ncurl -J -O -X GET &lt;received-download-url&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch the download URL of an Object\nlet request = GetDownloadUrlRequest { \n    object_id: \"&lt;object-id&gt;\".to_string() \n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.get_download_url(request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\nlet download_url = response.url;\n\n// Send GET request to download url\nlet response = reqwest::get(download_url).await.unwrap();\n\n// Only proceed if response status is ok\nif response.status() != StatusCode::OK {\n    panic!(\"Get request for file download failed.\");\n}\n\n// Set default filename to \"object.&lt;object-id&gt;\"\nlet mut file_name = format!(\n    \"object.{}\",\n    response.url().path_segments().unwrap().last().unwrap()\n);\n\n// Try to extract filename from download url query parameter\nfor elem in response.url().query_pairs() {\n    if elem.0 == \"filename\" {\n        file_name = elem.1.to_string();\n    }\n}\n\n// Create local file\nlet target_path = Path::new(\"/tmp\").join();\nlet mut target_file = File::create(target_path).unwrap();\n\n// Write response content to file\nlet mut content = Cursor::new(response.bytes().await.unwrap());\ncopy(&amp;mut content, &amp;mut target_file).unwrap();\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch an Objects download url\ndownload_url_request = GetDownloadURLRequest(\n    object_id=\"&lt;object-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\ndownload_url_response = client.object_client.GetDownloadURL(request=download_url_request)\n\n# Extract download url from response\ndownload_url = download_url_response.url.url\n\n# Try to extract filename from download url query parameter\nparsed_url = urlparse(download_url)\nlocal_filename = parse_qs(parsed_url.query)['filename'][0]\n\nif local_filename is None:\n    local_filepath = os.path.join(\"/tmp\", f'object.{object_id}')\nelse:\n    local_filepath = os.path.join(\"/tmp\", local_filename)\n\n# Send GET request to download url\nwith requests.get(download_url, stream=True) as r:\n    r.raise_for_status()\n\n    // Write response content in chunks to local file\n    with open(local_filepath, 'wb') as f:\n        for chunk in r.iter_content(chunk_size=8192):  # Chunk size can be adapted\n            f.write(chunk)\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/#update-object","title":"Update Object","text":"<p>Objects can still be updated after finishing.  Depending on the fields to be updated a new revision of the Object gets created.  You can check if the returned Object is a new revision through the response paramater <code>new_revision</code>.</p> <p>Operations which are updated \"in-place\":</p> <ul> <li>Description modification</li> <li>Key-value adding</li> <li>Dataclass relaxing </li> <li>Parent modification</li> <li><code>AllRightsReserved</code> license update </li> </ul> <p>Operations which always trigger the creation of a new revision:</p> <ul> <li><code>force_revision == true</code> in the request</li> <li>Name update</li> <li>Key-value removal</li> <li>Object hashes modification</li> <li>License update with the exception of <code>AllRightsReserved</code></li> </ul> <p>A new revision Object always has the status Initializing analog to the initial creation of an Object.  In the same way, the Object must be finished either through a single part data upload or a manual finish request to set its status to Available.</p> Required permissions <p>This request requires at least WRITE permissions on the Object or one of its parent resources.</p>"},{"location":"get_started/basic_usage/07_How-To-Objects/#update-which-does-not-create-a-new-revision","title":"Update which does not create a new revision","text":"cURL Rust Python <pre><code># Native JSON request to update the description of an Object in-place\ncurl -d '\n  {\n    \"name\": \"&lt;old-name&gt;\",\n    \"description\": \"Updated demo Object\",\n    \"addKeyValues\": [],\n    \"removeKeyValues\": [],\n    \"dataClass\": \"&lt;old-data-class&gt;\",\n    \"projectId\": \"&lt;old-project-id&gt;\",\n    \"collectionId\": \"&lt;old-collection-id&gt;\",\n    \"datasetId\": \"&lt;old-dataset-id&gt;\",\n    \"hashes\": [&lt;old-hashes&gt;],\n    \"forceRevision\": false,\n    \"metadataLicenseTag\": \"&lt;old-license-tag&gt;\",\n    \"dataLicenseTag\": \"&lt;old-license-tag&gt;\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id}\n</code></pre> <pre><code># Native JSON request to add a key-value to an Object in-place\ncurl -d '\n  {\n    \"name\": \"&lt;old-name&gt;\",\n    \"description\": \"&lt;old-description&gt;\",\n    \"addKeyValues\": [\n      {\n        \"key\": \"LabelKey\",\n        \"value\": \"LabelValue\",\n        \"variant\": \"KEY_VALUE_VARIANT_LABEL\"\n      }\n    ],\n    \"removeKeyValues\": [],\n    \"dataClass\": \"&lt;old-data-class&gt;\",\n    \"projectId\": \"&lt;old-project-id&gt;\",\n    \"collectionId\": \"&lt;old-collection-id&gt;\",\n    \"datasetId\": \"&lt;old-dataset-id&gt;\",\n    \"hashes\": [&lt;old-hashes&gt;],\n    \"forceRevision\": false\n    \"metadataLicenseTag\": \"&lt;old-license-tag&gt;\",\n    \"dataLicenseTag\": \"&lt;old-license-tag&gt;\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id}\n</code></pre> <pre><code># Native JSON request to update the title of an Object in-place\ncurl -d '\n  {\n    \"title\": \"Updated Title\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id}/title\n</code></pre> <pre><code># Native JSON request to add an author to an Object in-place\ncurl -d '\n  {\n    \"addAuthors\": [\n        {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"orcid\": \"0000-0002-1825-0097\",\n        \"id\": \"&lt;user-id-if-registered&gt;\"\n        }\n    ],\n    \"removeAuthors\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id}/authors\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the description of an Object in-place\nlet add_request = UpdateObjectRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    name: None,\n    description: Some(\"Updated demo Object\".to_string()),\n    add_key_values: vec![],\n    remove_key_values: vec![],\n    data_class: DataClass::Public as i32,\n    hashes: vec![&lt;old-hashes&gt;],\n    force_revision: false,\n    metadata_license_tag: None,\n    data_license_tag: None,\n    parent: None,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.update_object(add_request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add a key-value to an Object in-place\nlet add_request = UpdateObjectRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    name: None,\n    description: None,\n    add_key_values: vec![KeyValue {\n        key: \"LabelKey\".to_string(),\n        value: \"LabelValue\".to_string(),\n        variant: KeyValueVariant::Label as i32,\n    }],\n    remove_key_values: vec![],\n    data_class: DataClass::Public as i32,\n    hashes: vec![&lt;old-hashes&gt;],\n    force_revision: false,\n    metadata_license_tag: None,\n    data_license_tag: None,\n    parent: None,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.update_object(add_request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the title of an Object in-place\nlet add_request = UpdateObjectTitleRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    title: \"Updated Title\",\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.update_object_title(add_request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add an author to an Object\nlet request = UpdateObjectAuthorsRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    add_authors: vec![Author {\n        first_name: \"John\".to_string(),\n        last_name: \"Doe\".to_string(),\n        email: \"john.doe@example.com\".to_string(),\n        orcid: \"0000-0002-1825-0097\".to_string(),\n        id: \"&lt;user-id-if-registered&gt;\".to_string(),\n    }],\n    remove_authors: vec![],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.update_object_authors(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the description of an Object in-place\nrequest = UpdateObjectRequest(\n    object_id=\"&lt;object-id&gt;\",\n    name=\"&lt;old-name&gt;\",\n    description=\"Updated demo Object\",\n    add_key_values=[],\n    remove_key_values=[],\n    data_class=DataClass.DATA_CLASS_PUBLIC,\n    project_id=\"&lt;old-project-id\",\n    collection_id=\"&lt;old-collection-id\",\n    dataset_id=\"&lt;old-dataset-id\",\n    hashes=[&lt;old-hashes&gt;],\n    force_revision=False,\n    metadata_license_tag: \"&lt;old-license-tag&gt;\",\n    data_license_tag: \"&lt;old-license-tag&gt;\",\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.UpdateObject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add a key-value to an Object in-place\nrequest = UpdateObjectRequest(\n    object_id=\"&lt;object-id&gt;\",\n    name=\"&lt;old-name&gt;\",\n    description=\"&lt;old-description&gt;\",\n    add_key_values=[KeyValue(\n        key=\"LabelKey\",\n        value=\"LabelValue\",\n        variant=KeyValueVariant.KEY_VALUE_VARIANT_LABEL\n    )],\n    remove_key_values=[],\n    data_class=DataClass.DATA_CLASS_PUBLIC,\n    project_id=\"&lt;old-project-id\",\n    collection_id=\"&lt;old-collection-id\",\n    dataset_id=\"&lt;old-dataset-id\",\n    hashes=[&lt;old-hashes&gt;],\n    force_revision=False,\n    metadata_license_tag: \"&lt;old-license-tag&gt;\",\n    data_license_tag: \"&lt;old-license-tag&gt;\",\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.UpdateObject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the title of a Dataset\nrequest = UpdateObjectTitleRequest(\n    object_id=\"&lt;object-id&gt;\",\n    title=\"Updated Title\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.UpdateObjectTitle(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add an author to a Dataset\nrequest = UpdateObjectAuthorsRequest(\n    object_id=\"&lt;object-id&gt;\",\n    add_authors=[Author(\n        first_name=\"John\",\n        last_name=\"Doe\",\n        email=\"john.doe@example.com\",\n        orcid=\"0000-0002-1825-0097\",\n        user_id=\"&lt;user-id-if-registered\"\n    )],\n    remove_authors=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.dataset_client.UpdateObjectAuthors(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/#update-which-creates-a-new-revision","title":"Update which creates a new revision","text":"<p>If a new revision of an Object gets created it basically gets cloned with the specified updates applied. As already mentioned in the general Object update introduction, the newly created Object must be finished in order for it to have its status set from Initializing to Available.</p>"},{"location":"get_started/basic_usage/07_How-To-Objects/#update-without-data-re-upload","title":"Update without data re-upload","text":"cURL Rust Python <pre><code># Native JSON request to update the name of an Object and extract id of new revision\nNEW_REVISION_ID=$(curl -d '\n  {\n    \"name\": \"aruna_updated.png\",\n    \"description\": \"&lt;old-description&gt;\",\n    \"addKeyValues\": [],\n    \"removeKeyValues\": [],\n    \"dataClass\": \"&lt;old-data-class&gt;\",\n    \"projectId\": \"&lt;old-project-id&gt;\",\n    \"collectionId\": \"&lt;old-collection-id&gt;\",\n    \"datasetId\": \"&lt;old-dataset-id&gt;\",\n    \"hashes\": [&lt;old-hashes&gt;],\n    \"forceRevision\": true,\n    \"metadataLicenseTag\": \"&lt;old-license-tag&gt;\",\n    \"dataLicenseTag\": \"&lt;old-license-tag&gt;\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id} | jq -r '.object.id')\n\n# Native JSON request to finish the new Object revision\ncurl -d '\n  {\n    \"contentLen\": \"&lt;old-content-len&gt;\",\n    \"hashes\": [&lt;old-hashes&gt;],\n    \"completedParts\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{NEW_REVISION_ID}/finish\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the description of an Object in-place\nlet request = UpdateObjectRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    name: Some(\"aruna_updated.png\".to_string()),\n    description: None,\n    add_key_values: vec![],\n    remove_key_values: vec![],\n    data_class: DataClass::Public as i32,\n    hashes: vec![&lt;old-hashes&gt;],\n    force_revision: true, // (1)\n    metadata_license_tag: None,\n    data_license_tag: None,\n    parent: None,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.update_object(request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\nlet revision_object = response.object.unwrap();\n\n// Create tonic/ArunaAPI request to finish the new Object revision\nlet request = FinishObjectStagingRequest {\n    object_id: revision_object.id,\n    content_len: revision_object.content_len,\n    hashes: revision_object.hashes,\n    completed_parts: [],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.finish_object_staging(request)\n                            .await\n                            .unwrap()\n                            .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <ol> <li>Could also be left <code>false</code> since the name change alone triggers the creation of a new revision.</li> </ol> <pre><code># Create tonic/ArunaAPI request to update an objects description\nrequest = UpdateObjectRequest(\n    object_id=\"&lt;object-id&gt;\",\n    name=\"&lt;old-name&gt;\",\n    description=\"Updated demo Object\",\n    add_key_values=[],\n    remove_key_values=[],\n    data_class=DataClass.DATA_CLASS_PUBLIC,\n    project_id=\"&lt;old-project-id\",\n    collection_id=\"&lt;old-collection-id\",\n    dataset_id=\"&lt;old-dataset-id\",\n    hashes=[],\n    force_revision=False,\n    metadata_license_tag=\"&lt;old-license-tag&gt;\",\n    data_license_tag=\"&lt;old-license-tag&gt;\",\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nupdate_response = client.object_client.UpdateObject(request=request)\n\n# Do something with the response\nprint(f'{update_response}')\nlet revision_object = response.object\n\n\n# Create tonic/ArunaAPI request to finish a single part upload staging object\nrequest = FinishObjectStagingRequest(\n    object_id=revision_object.id,\n    content_len=revision_object.content_len,\n    hashes=revision_object.hashes,\n    completed_parts=[],\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nfinish_response = client.object_client.FinishObjectStaging(request=request)\n\n# Do something with the response\nprint(f'{finish_response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/#update-with-data-re-upload","title":"Update with data re-upload","text":"cURL Rust Python <pre><code># Native JSON request to re-upload the modified data\nNEW_REVISION_ID=$(curl -d '\n  {\n    \"name\": \"aruna_updated.png\",\n    \"description\": \"&lt;old-description&gt;\",\n    \"addKeyValues\": [],\n    \"removeKeyValues\": [],\n    \"dataClass\": \"&lt;old-data-class&gt;\",\n    \"projectId\": \"&lt;old-project-id&gt;\",\n    \"collectionId\": \"&lt;old-collection-id&gt;\",\n    \"datasetId\": \"&lt;old-dataset-id&gt;\",\n    \"hashes\": [&lt;old-hashes&gt;],\n    \"forceRevision\": true,\n    \"metadataLicenseTag\": \"&lt;old-license-tag&gt;\",\n    \"dataLicenseTag\": \"&lt;old-license-tag&gt;\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{object-id} | jq -r '.object.id')\n\n# Native JSON request to request an upload url for single part upload\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/{NEW_REVISION_ID}/upload\n\n# Native JSON request to upload single part data through the generated DataProxy upload url\ncurl -X PUT -T &lt;path-to-local-file&gt; &lt;upload-url&gt;\n\n# Request to finish the updated object only needed in case of no upload or multipart upload\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to re-upload the modified data\nlet request = UpdateObjectRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    name: Some(\"aruna_updated.png\".to_string()),\n    description: None,\n    add_key_values: vec![],\n    remove_key_values: vec![],\n    data_class: DataClass::Public as i32,\n    hashes: vec![&lt;old-hashes&gt;],\n    force_revision: true,\n    metadata_license_tag: None,\n    data_license_tag: None,\n    parent: None,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.update_object(request)\n                                   .await\n                                   .unwrap()\n                                   .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\nlet revision_object = response.object.unwrap();\n\n// Create tonic/ArunaAPI request to request an upload url for single part upload\nlet get_request = GetUploadUrlRequest {\n    object_id: revision_object.id,\n    multipart: false,\n    part_number: 1,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet get_response = object_client.get_upload_url(get_request)\n                                .await\n                                .unwrap()\n                                .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", get_response);\nlet upload_url = get_response.url;\n\n// Upload local file to the generated upload URL\nlet path = Path::new(\"/path/to/local/file\");\nlet file = std::fs::File::open(path).await.unwrap();\n\nlet client = reqwest::Client::new();\nlet stream = FramedRead::new(file, BytesCodec::new());\nlet body   = Body::wrap_stream(stream);\n\n// Send the request to the upload url\nlet upload_response = client.put(upload_url)\n                            .body(body)\n                            .send()\n                            .await\n                            .unwrap();\n\n// Do something with the response\nprintln!(\"{:#?}\", upload_response);\n\n// Request to finish a staging object only needed in case of no upload or multipart upload\n</code></pre> <pre><code># Create tonic/ArunaAPI request to re-upload the modified data\nrequest = UpdateObjectRequest(\n    object_id=\"&lt;object-id&gt;\",\n    name=\"aruna_updated.\",\n    description=\"&lt;old-description&gt;\",\n    add_key_values=[],\n    remove_key_values=[],\n    data_class=DataClass.DATA_CLASS_PUBLIC,\n    project_id=\"&lt;old-project-id\",\n    collection_id=\"&lt;old-collection-id\",\n    dataset_id=\"&lt;old-dataset-id\",\n    hashes=[],\n    force_revision=False,\n    metadata_license_tag=\"&lt;old-license-tag&gt;\",\n    data_license_tag=\"&lt;old-license-tag&gt;\",\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.UpdateObject(request=request)\n\n# Do something with the response\nprint(f'{response}')\nrevision_object = response.object\n\n# Create tonic/ArunaAPI request to request an upload url for single part upload\nrequest = GetUploadURLRequest(\n    object_id=revision_object.id,\n    multipart=False,\n    part_number=1\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nget_response = client.object_client.GetUploadURL(request=request)\n\n# Do something with the response\nprint(f'{get_response}')\nupload_url = get_response.url.url\n\n# Upload updated local file to the generated upload URL\nfile_path = \"/path/to/updated/local/file\"\nheaders = {'Content-type': 'application/octet-stream'}\nupload_response = requests.put(upload_url, data=open(file_path, 'rb'), headers=headers)\n\n# Do something with the response (e.g. check status if was successful)\nprint(f'{upload_response}')\n\n# Request to finish a staging object only needed in case of no upload or multipart upload\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-Objects/#delete-object","title":"Delete Object","text":"<p>Objects can also be deleted again according to the FAIR guidelines.</p> <p>Info</p> <p>Deletion does not remove the Object from the database, but sets the status of the Object \"DELETED\".</p> <p>This means that deleted objects or individually deleted revisions of objects do not simply disappear, but a tombstone of the deleted resource remains.</p> Required permissions <p>This request requires at least ADMIN permissions on the Object or one of its parent resources.</p>  cURL Rust Python <pre><code># Native JSON request to delete an Object\ncurl -d '\n  {\n    \"withRevisions\": \"false\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/objects/&lt;object-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete an Object\nlet request = DeleteObjectRequest {\n    object_id: \"&lt;object-id&gt;\".to_string(),\n    with_revisions: false,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = object_client.delete_object(request)\n                                   .await\n                                   .unwrap()\n                                   .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete an Object\nrequest = DeleteObjectRequest(\n    object_id=\"&lt;object-id&gt;\",\n    with_revisions=False\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.object_client.DeleteObject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/08_How-To-Relations/","title":"How to use the Relation API / RelationsServiceClient","text":"<p>All resources and their relationships form a directed acyclic graph (DAG) with Projects as roots and Objects as leaves. Collections and Datasets can exist directly beneath Projects but only a Dataset and/or Objects can be created inside a Collection.</p> <p>In our model, we also distinguish internal relations between Aruna resources and external relations which point to resources outside of Aruna e.g. a DOI.</p> <p>For a deeper dive into the relations concept of Aruna read the  Data Structure section.</p>"},{"location":"get_started/basic_usage/08_How-To-Relations/#modify-relations","title":"Modify relations","text":"<p>When resources are created, updated and cloned, internal relationships are automatically created between the resources concerned.  But these relationships can also be modified again without any problems.  Only with the predefined relationship types must certain rules be adhered to.  With freely defined relationship types, resources can be linked to each other as desired.</p> Required permissions <p>This request requires at least WRITE permissions on all affected resources.</p>  cURL Rust Python <pre><code># Native JSON request to add an Object to another Project\ncurl -d '\n  {\n    \"resourceId\": \"&lt;project-id&gt;\",\n    \"addRelations\": [\n        {\n        \"internal\": {\n            \"resourceId\": \"&lt;object-id&gt;\",\n            \"resourceVariant\": \"RESOURCE_VARIANT_OBJECT\",\n            \"definedVariant\": \"INTERNAL_RELATION_VARIANT_BELONGS_TO\",\n            \"customVariant\": \"\",\n            \"direction\": \"RELATION_DIRECTION_OUTBOUND\"\n        }\n        }\n    ],\n    \"removeRelations\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/relations\n</code></pre> <pre><code># Native JSON request to move a Collection to another Project\ncurl -d '\n  {\n    \"resourceId\": \"&lt;collection-id&gt;\",\n    \"addRelations\": [\n      {\n        \"internal\": {\n          \"resourceId\": \"&lt;another-project-id&gt;\",\n          \"resourceVariant\": \"RESOURCE_VARIANT_PROJECT\",\n          \"definedVariant\": \"INTERNAL_RELATION_VARIANT_BELONGS_TO\",\n          \"customVariant\": \"\",\n          \"direction\": \"RELATION_DIRECTION_INBOUND\"\n        }\n      }\n    ],\n    \"removeRelations\": [\n      {\n        \"internal\": {\n          \"resourceId\": \"&lt;original-project-id&gt;\",\n          \"resourceVariant\": \"RESOURCE_VARIANT_PROJECT\",\n          \"definedVariant\": \"INTERNAL_RELATION_VARIANT_BELONGS_TO\",\n          \"customVariant\": \"\",\n          \"direction\": \"RELATION_DIRECTION_INBOUND\"\n        }\n      }\n    ]\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/relations\n</code></pre> <pre><code># Native JSON request to add an external relation to an Object\ncurl -d '\n  {\n    \"resourceId\": \"&lt;object-id&gt;\",\n    \"addRelations\": [\n      {\n        \"external\": {\n          \"identifier\": \"https://dev.aruna-storage.org/objects/&lt;object-id&gt;\",\n          \"definedVariant\": \"EXTERNAL_RELATION_VARIANT_URL\",\n          \"customVariant\": \"\"\n        },\n      }\n    ],\n    \"removeRelations\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/relations\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add an Object to another Project\nlet request = ModifyRelationsRequest {\n    resource_id: \"&lt;project-id&gt;\".to_string(),\n    add_relations: vec![Relation {\n        relation: Some(relation::Relation::Internal(InternalRelation {\n            resource_id: \"&lt;object-id&gt;\".to_string(),\n            resource_variant: ResourceVariant::Object as i32,\n            defined_variant: InternalRelationVariant::BelongsTo as i32,\n            custom_variant: None,\n            direction: RelationDirection::Outbound as i32,\n        })),\n    }],\n    remove_relations: vec![],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = relation_client.modify_relations(request)\n                              .await\n                              .unwrap()\n                              .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to move a Collection to another Project\nlet request = ModifyRelationsRequest {\n    resource_id: \"&lt;collection-id&gt;\".to_string(),\n    add_relations: vec![Relation {\n        relation: Some(relation::Relation::Internal(InternalRelation {\n            resource_id: \"&lt;another-project-id&gt;\".to_string(),\n            resource_variant: ResourceVariant::Project as i32,\n            defined_variant: InternalRelationVariant::BelongsTo as i32,\n            custom_variant: None,\n            direction: RelationDirection::Inbound as i32,\n        })),\n    }],\n    remove_relations: vec![\n        Relation {\n        relation: Some(relation::Relation::Internal(InternalRelation {\n            resource_id: \"&lt;original-project-id&gt;\".to_string(),\n            resource_variant: ResourceVariant::Project as i32,\n            defined_variant: InternalRelationVariant::BelongsTo as i32,\n            custom_variant: None,\n            direction: RelationDirection::Inbound as i32,\n        })),\n    }\n    ],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = relation_client.modify_relations(request)\n                              .await\n                              .unwrap()\n                              .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add an external relation to an Object\nlet request = ModifyRelationsRequest {\n    resource_id: \"&lt;project-id&gt;\".to_string(),\n    add_relations: vec![Relation {\n        relation: Some(relation::Relation::External(\n                         ExternalRelation {\n                           identifier: \"https://dev.aruna-storage.org/objects/&lt;object-id&gt;\".to_string(),\n                           defined_variant: ExternalRelationVariant::Url as i32,\n                           custom_variant: None,\n                         }\n                       )),\n    }],\n    remove_relations: vec![],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = relation_client.modify_relations(request)\n                              .await\n                              .unwrap()\n                              .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add an Object to another Project\nrequest = ModifyRelationsRequest(\n    resource_id=\"&lt;project-id&gt;\",\n    add_relations=[\n        Relation(\n            internal=InternalRelation(\n                resource_id=\"&lt;object-id&gt;\",\n                resource_variant=ResourceVariant.RESOURCE_VARIANT_OBJECT,\n                defined_variant=InternalRelationVariant.INTERNAL_RELATION_VARIANT_BELONGS_TO,\n                custom_variant=None,\n                direction=RelationDirection.RELATION_DIRECTION_OUTBOUND\n            )\n        )\n    ],\n    remove_relations=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.relation_client.ModifyRelations(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to move a Collection to another Project\nrequest = ModifyRelationsRequest(\n    resource_id=\"&lt;collection-id&gt;\",\n    add_relations=[\n        Relation(\n            internal=InternalRelation(\n                resource_id=\"&lt;another-project-id&gt;\",\n                resource_variant=ResourceVariant.RESOURCE_VARIANT_PROJECT,\n                defined_variant=InternalRelationVariant.INTERNAL_RELATION_VARIANT_BELONGS_TO,\n                custom_variant=None,\n                direction=RelationDirection.RELATION_DIRECTION_INBOUND\n            )\n        )\n    ],\n    remove_relations=[\n        Relation(\n            internal=InternalRelation(\n                resource_id=\"&lt;original-project-id&gt;\",\n                resource_variant=ResourceVariant.RESOURCE_VARIANT_PROJECT,\n                defined_variant=InternalRelationVariant.INTERNAL_RELATION_VARIANT_BELONGS_TO,\n                custom_variant=None,\n                direction=RelationDirection.RELATION_DIRECTION_INBOUND\n            )\n        )\n    ]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.relation_client.ModifyRelations(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add an external relation to an Object\nrequest = ModifyRelationsRequest(\n    resource_id=\"&lt;project-id&gt;\",\n    add_relations=[\n        Relation(\n            internal=ExternalRelation(\n                identifier: \"https://dev.aruna-storage.org/objects/&lt;object-id&gt;\".to_string(),\n                defined_variant: ExternalRelationVariant.EXTERNAL_RELATION_VARIANT_URL,\n                custom_variant: None,\n            )\n        )\n    ],\n    remove_relations=[]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.relation_client.ModifyRelations(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/08_How-To-Relations/#get-resource-hierarchy","title":"Get resource hierarchy","text":"<p>API examples of how to fetch all downstream hierarchies of a specific resource.</p>  cURL Rust Python <pre><code># Native JSON request to fetch the downstream hierarchies of a specific resource\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/relations/{resource-id}/hierarchy'\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch the downstream hierarchies of a specific resource\nlet request = GetHierarchyRequest {\n    resource_id: \"&lt;resource-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = relation_client.get_hierarchy(request)\n                              .await\n                              .unwrap()\n                              .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a Project\nrequest = GetHierarchyRequest(\n    resource_id=\"&lt;resource-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.relation_client.GetHierarchy(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/09_How-To-EventNotification/","title":"Introduction","text":""},{"location":"get_started/basic_usage/09_How-To-EventNotification/#event-notifications","title":"Event notifications","text":"<p>Aruna includes an event notification service which can be used to subscribe to specific resources including their subresources.  This means that the created event notification consumer can be used to fetch notifications regarding all actions which affected the resources in the scope of the consumer. </p> <p>The event notification system is based on the integration of the cloud native, open source messaging technology  NATS.io </p> <p>These notifications have a shelf life, so they are not persistent forever.  The exact concept of how many notifications are retained over what period of time is not yet final. </p>"},{"location":"get_started/basic_usage/09_How-To-EventNotification/#create-event-notification-consumer","title":"Create event notification consumer","text":"<p>API examples of how to create an event notification consumer.</p> Required permissions <p>This request requires at least READ permissions on all resources in the scope of the consumer.</p>  Rust Python <pre><code>// Create tonic/ArunaAPI request to create an event notification consumer\nlet request = CreateStreamConsumerRequest {\n    target: Some(Target::Resource(ResourceTarget {\n        resource_id: \"&lt;project-id&gt;\".to_string(),\n        resource_variant: ResourceVariant::Project as i32,\n    })),\n    include_subresources: true,\n    stream_type: Some(StreamType::StreamAll(StreamAll{})),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = notification_client.create_stream_consumer(request)\n                                  .await\n                                  .unwrap()\n                                  .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create an event notification consumer\nrequest = CreateStreamConsumerRequest(\n    resource=ResourceTarget(\n        resource_id=\"&lt;resource-id&gt;\",\n        resource_variant=ResourceVariant.RESOURCE_VARIANT_PROJECT\n    ),\n    user=\"&lt;user-id&gt;\",\n    announcements=False,\n    all=False,\n    include_subresources=True,\n    stream_all=StreamAll(),\n    stream_from_date=None,\n    stream_from_sequence=None\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.notification_client.CreateStreamConsumer(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/09_How-To-EventNotification/#fetch-messages-via-batch","title":"Fetch messages via batch","text":"<p>API examples of how to fetch an event notification message batch.</p> Required permissions <p>This request requires at least READ permissions on all resources in the scope of the consumer.</p>  Rust Python <pre><code>// Create tonic/ArunaAPI request to fetch an event message batch\nlet request = GetEventMessageBatchRequest { \n    stream_consumer: \"&lt;stream-consumer-id&gt;\".to_string(), \n    batch_size: 25 \n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = notification_client.get_event_message_batch(request)\n                                  .await\n                                  .unwrap()\n                                  .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch an event message batch\nrequest = GetEventMessageBatchRequest(\n    stream_consumer=\"&lt;stream-consumer-id&gt;\", \n    batch_size=25 \n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.notification_client.GetEventMessageBatch(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/09_How-To-EventNotification/#fetch-messages-via-stream","title":"Fetch messages via stream","text":"<p>API examples of how to fetch event notification messages via stream.</p> Required permissions <p>This request requires at least READ permissions on all resources in the scope of the consumer.</p>  Rust Python <pre><code>// Create tonic/ArunaAPI request to create an event notification stream\nlet request = GetEventMessageStreamRequest { \n    stream_consumer: \"&lt;stream-consumer-id&gt;\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = notification_client.get_event_message_stream(request)\n                                  .await\n                                  .unwrap()\n                                  .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create an event notification stream\nrequest = GetEventMessageStreamRequest ( \n    stream_consumer: \"&lt;stream-consumer-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.notification_client.GetEventMessageStream(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/09_How-To-EventNotification/#acknowledge-messages","title":"Acknowledge messages","text":"<p>Event notification messages have to be acknowledged in order that they won't be delivered again to the consumer after a set period of time.</p> Required permissions <p>As the complete <code>Reply</code> (including a secure HMAC) is also delivered with the message individually for the consumer there are no special permissions required.</p>  Rust Python <pre><code>// Create tonic/ArunaAPI request to acknowledge a batch of event notifications\nlet request = AcknowledgeMessageBatchRequest {\n    replies: vec![Reply {\n        reply: \"&lt;reply-subject&gt;\".to_string(),\n        salt: \"&lt;hmac-salt&gt;\",\n        hmac: \"&lt;message-hmac&gt;\".to_string(),\n    }],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = notification_client.acknowledge_message_batch(request)\n                                  .await\n                                  .unwrap()\n                                  .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to acknowledge a batch of event notifications\nrequest = AcknowledgeMessageBatchRequest(\n    replies: [Reply {\n        reply=\"&lt;reply-subject&gt;\",\n        salt=\"&lt;hmac-salt&gt;\",\n        hmac=\"&lt;message-hmac&gt;\"\n    }]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.notification_client.AcknowledgeMessageBatch(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/09_How-To-EventNotification/#delete-event-notification-consumer","title":"Delete event notification consumer","text":"<p>API examples of how to delete an event notification consumer.</p> Required permissions <p>This request requires at least WRITE permissions.</p>  Rust Python <pre><code>// Create tonic/ArunaAPI request to delete an event notification consumer\nlet request = DeleteStreamConsumerRequest {\n    stream_consumer: \"&lt;stream-consumer-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = notification_client.delete_stream_consumer(request)\n                                  .await\n                                  .unwrap()\n                                  .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete an event notification consumer\nrequest = DeleteStreamConsumerRequest(\n    stream_consumer=\"&lt;stream-consumer-id&gt;\",\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.notification_client.DeleteStreamConsumer(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/09_How-To-EventNotification/#personal-notifications","title":"Personal notifications","text":"<p>Some notifications are not based on actions in Aruna that affected specific resources but are addressed directly to a specific user. These notifications have to be persistent and therefore are retained separately from the event notification system until explicitly acknowledged.</p> <p>Examples for personal notifications would be permission changes on resources or access requests on resources from other users.</p>"},{"location":"get_started/basic_usage/09_How-To-EventNotification/#get-personal-notifications","title":"Get personal notifications","text":"<p>API examples of how to fetch persistent personal notifications.</p> Required permissions <p>This request only requires a personal token which authenticates and provides the user id.</p>  Rust Python <pre><code>// Create tonic/ArunaAPI request to fetch personal notifications\nlet request = GetPersonalNotificationsRequest {};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.get_personal_notifications(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch personal notifications\nrequest = GetPersonalNotificationsRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.GetPersonalNotifications(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/09_How-To-EventNotification/#acknowledge-personal-notifications","title":"Acknowledge personal notifications","text":"<p>API examples of how to acknowledge persistent personal notifications.</p> Required permissions <p>This request only requires a personal token which authenticates the user.</p>  Rust Python <pre><code>// Create tonic/ArunaAPI request to acknowledge personal notifications\nlet request = AcknowledgePersonalNotificationsRequest {\n    notification_ids: vec![\n        \"&lt;notification-id-01&gt;\".to_string(),\n        \"&lt;notification-id-02&gt;\".to_string(),\n        \"&lt;...&gt;\".to_string()\n    ],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = user_client.acknowledge_personal_notifications(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to acknowledge personal notifications\nrequest = AcknowledgePersonalNotificationsRequest(\n    notification_ids=[\n        \"&lt;notification-id-01&gt;\".to_string(),\n        \"&lt;notification-id-02&gt;\".to_string(),\n        \"&lt;...&gt;\".to_string()\n    ]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.user_client.AcknowledgePersonalNotifications(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/10_How-To-ServerInfo/","title":"How to use the StorageStatusService API / StorageStatusClient","text":""},{"location":"get_started/basic_usage/10_How-To-ServerInfo/#introduction","title":"Introduction","text":"<p>To get general information about an Aruna instance and its running components you can use the StorageStatusService API.</p> <p>For example, this can be either interesting for developers to know which versions they're dealing with or maybe to  introduce a service health monitor with the current status of the instance.</p>"},{"location":"get_started/basic_usage/10_How-To-ServerInfo/#get-storage-version","title":"Get Storage Version","text":"<p>API example for fetching the versions of all components running in the specific Aruna instance.</p> Required permissions <p>This request does not require any permissions.</p>  cURL Rust Python <pre><code># Native JSON request to get Aruna instance component versions \ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/info/version\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch component versions of the Aruna instance\nlet get_request = GetStorageVersionRequest {};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = info_client.get_storage_version(get_request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch component versions of the Aruna instance\nrequest = GetStorageVersionRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.info_client.GetStorageVersion(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/10_How-To-ServerInfo/#get-storage-status","title":"Get Storage Status","text":"<p>API example for fetching current status of the Aruna instance.</p> Required permissions <p>This request does not require any permissions.</p>  cURL Rust Python <pre><code># Native JSON request to get Aruna stoarge instance status\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/info/status\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch the current status of the Aruna instance\nlet get_request = GetStorageStatusRequest {};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = info_client.get_storage_status(get_request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch the current status of the Aruna instance\nrequest = GetStorageStatusRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.info_client.GetStorageStatus(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/10_How-To-ServerInfo/#get-available-public-keys","title":"Get available public keys","text":"<p>API example for fetching a list of the available public keys associated with the ArunaServer and DataProxy instances.</p> <p>These can be used to validate signatures of tokens and/or presigned URLs.</p> Required permissions <p>This request does not require any permissions.</p>  cURL Rust Python <pre><code># Native JSON request to get the list of available public keys\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/info/pubkeys\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to get the list of available public keys\nlet get_request = GetPubkeysRequest {};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = info_client.get_pubkeys(get_request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to get the list of available public keys\nrequest = GetPubkeysRequest()\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.info_client.GetPubkeys(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/11_How-To-S3-Interface/","title":"How to use the DataProxy S3 compatible interface","text":""},{"location":"get_started/basic_usage/11_How-To-S3-Interface/#introduction","title":"Introduction","text":"<p>The Aruna DataProxy implements a subset of the AWS S3 API specification. By providing an S3 compatible interface,  the DataProxy is able to interact with a wide variety of modern data analysis tools which natively support S3 as storage solution.</p> <p>Here we will give you examples for the currently supported and most common S3 functionality which can be used directly with an Aruna DataProxy.  For the best accessibility all the examples are written for the freely available tool  s5cmd which is an extremely fast command line client for uploading,  retrieving and managing data in Amazon S3 and other cloud storage service providers that use/support the S3 protocol.</p> <p>DataProxy access</p> <p>Before you can directly communicate with or upload data to a DataProxy you have to \"register\" your user first by requesting credentials for the specific endpoint.</p> <p>This is for data protection reasons, so that each DataProxy only receives and stores the data that is relevant to it.</p> <p>s5cmd Configuration</p> <p>s5cmd makes use of the  standard S3 configuration and credentials file. The examples in this section assume only a minimalist configuration containing the Access Key ID, Secret Access Key and DataProxy host.  The remaining parameters are optional and can be set with defaults.</p> <p>The configuration files are automatically picked up by s5cmd when they exist in the following default locations: </p> <ul> <li><code>&lt;user-home&gt;/.aws/config</code> and <code>&lt;user-home&gt;/.aws/credentials</code></li> </ul> .aws/config<pre><code>[default]\nendpoint_url = &lt;data-proxy-host-url&gt;\nregion = &lt;bucket-region&gt;\noutput = json\n  ...\n</code></pre> .aws/credentials<pre><code>[default]\naws_access_key_id = &lt;access-key-id&gt;\naws_secret_access_key = &lt;access-secret&gt;\n  ...\n</code></pre> <p>An alternative to the configuration files would be to use environment variables: </p> <ul> <li>Access Key Id: <code>export AWS_ACCESS_KEY_ID='&lt;access-key-id&gt;'</code></li> <li>Secret Access Key: <code>export AWS_SECRET_ACCESS_KEY='&lt;access-secret&gt;'</code></li> <li>Endpoint URL: <code>export S3_ENDPOINT_URL='&lt;data-proxy-host-url&gt;'</code></li> <li>Bucket Region: <code>export AWS_REGION='&lt;bucket-region&gt;'</code></li> </ul> <p>... or partially the global CLI options of s5cmd:</p> <ul> <li>Endpoint URL: <code>--endpoint-url &lt;aruna-dataproxy-endpoint&gt;</code></li> <li>Output format: <code>--json</code></li> <li>Disable SSL verification: <code>--no-verify-ssl</code></li> </ul>"},{"location":"get_started/basic_usage/11_How-To-S3-Interface/#object-paths-in-aruna","title":"Object paths in Aruna","text":"<p>In order for Aruna to provide an S3 compatible interface, it is necessary that Objects can be accessed via a unique path instead of their id.</p> <p>Currently, this path complies with the standardized specifications of AWS S3 and are represented in the format <code>&lt;project-name&gt;/&lt;collection-name&gt;/&lt;dataset-name&gt;/&lt;object-filename&gt;</code> which resembles the S3 path-style <code>s3://bucket/key</code> where:</p> <ul> <li>bucket: <code>&lt;project-name&gt;</code></li> <li>key: <code>&lt;collection-name&gt;/&lt;dataset-name&gt;/&lt;object-filename&gt;</code></li> </ul> <p>This also applies when the Object has a relation to multiple parents which means that in this case the Object is available through multiple paths.</p> Example for an Object path inside a Project <ul> <li>Project name: <code>dummy-project</code></li> <li>Object filename: <code>example.file</code></li> </ul> <p>This would correspond to the path: <code>s3://dummy-project/example.file</code></p> Example for an Object path inside an existing Collection <ul> <li>Project name: <code>dummy-project</code></li> <li>Collection name: <code>sample-collection</code></li> <li>Object filename: <code>example.file</code></li> </ul> <p>This would correspond to the path: <code>s3://dummy-project/sample-collection/example.file</code></p> Example for an Object path inside an existing Collection and Dataset <ul> <li>Project name: <code>dummy-project</code></li> <li>Collection name: <code>sample-collection</code></li> <li>Dataset name: <code>my-dataset</code></li> <li>Object filename: <code>example.file</code></li> </ul> <p>This would correspond to the path: <code>s3://dummy-project/sample-collection/my-dataset/example.file</code></p> <p>Path limitations</p> <p>The fully qualified paths of objects are unique, which implies some conditions that must be met:</p> <ul> <li>Project names are unique globally</li> <li>Project names are restricted to the following characters: [a-z0-9-] (i.e. alphanumeric lowercase and hyphens)</li> <li>Collection and Dataset names are restricted to the safe characters specified in the S3 object key naming guidelines</li> <li>Names are unique within each hierarchy (e.g. you cannot create Objects with the same name inside the same Collection)</li> </ul>"},{"location":"get_started/basic_usage/11_How-To-S3-Interface/#create-bucket","title":"Create bucket","text":"<p>This operation is analog to the Create Project API request with a specific endpoint.</p> <p>This means that the Project is also registered in the central ArunaServer catalog with the specific DataProxy as its main data location.</p> <p> Native S3 Create Bucket Specification</p> Required permissions <p>To create a new Project you only have to be a registered Aruna user.</p>  s5cmd <pre><code># Create a Project with a create bucket request\ns5cmd mb s3://mybucket\n</code></pre>"},{"location":"get_started/basic_usage/11_How-To-S3-Interface/#put-object","title":"Put Object","text":"<p> Native S3 Put Request Specification</p> <p>This operation is analog to the combination of Create Object, Upload data and Finish Object.  That also means that on success the Object is directly available. </p> <p>If an object already exists under the provided path, this object will be updated and a new revision will be created which takes the uploaded data.</p> <p>Optional parent creation</p> <p>Optionally, the non-existent parent resources of the path will also be created if they do not exist at the time of execution, except for Projects. As the middle part of a path in an Aruna hierarchy can be ambiguous, the Dataset is always favoured during creation. This means you can't create a Collection as a direct parent of an Object with an S3 request.</p> Create a Collection, Dataset and ObjectCreate a Dataset and Object <ul> <li>Project name: <code>dummy-project</code></li> <li>Object filename: <code>example.file</code></li> </ul> <p><code>s3://dummy-project/new-collection/new-dataset/example.file</code> would also create the Collection with the name <code>new-collection</code> and the Dataset with the name <code>new-dataset</code>. The created Dataset will be the direct parent of the Object.</p> <ul> <li>Project name: <code>dummy-project</code></li> <li>Object filename: <code>example.file</code></li> </ul> <p><code>s3://dummy-project/new-dataset/example.file</code> would also create the Dataset with the name <code>new-collection</code> as the parent of the Object. The created Dataset will be the direct parent of the Object.</p> Required permissions <p>This request requires at least APPEND permission on the parent resource in which the Collection/Dataset/Object is to be created.</p>  s5cmd <pre><code># Upload a file as single part upload in a Project\ns5cmd cp /tmp/example.file s3://dummy-project/example.file\n</code></pre> <pre><code># Upload a file as single part upload in a Dataset that does not exist\ns5cmd cp /tmp/example.file s3://dummy-project/my-dataset/example.file\n</code></pre> <pre><code># Upload a file as single part upload in a Collection if it already exists\ns5cmd cp /tmp/example.file s3://dummy-project/my-collection/example.file\n</code></pre> <pre><code># Upload a file as single part upload in a Dataset inside a Collection\ns5cmd cp /tmp/example.file s3://dummy-project/my-collection/my-dataset/example.file\n</code></pre>"},{"location":"get_started/basic_usage/11_How-To-S3-Interface/#multipart-upload","title":"Multipart Upload","text":"<p>s5cmd also supports Amazon S3 multipart uploads. Multipart uploads are automatically used  when a file to upload is larger than 5MB if the <code>multipart_chunksize = &lt;chunk-size&gt;</code> parameter is not set in the configuration file.</p> <p>Natively a multipart upload has to be <code>created</code> for each part upload and <code>completed</code> after the upload of all parts has been finished.</p> <ul> <li> Native S3 Create Multipart Upload Specification</li> <li> Native S3 Upload Part Specification</li> <li> Native S3 Complete Multipart Upload Specification</li> </ul> Required permissions <p>This request requires at least APPEND permission on the parent resource in which the Collection/Dataset/Object is to be created.</p>  s5cmd <pre><code># Upload a file in 5MB chunks\ns5cmd cp /tmp/large-example.file s3://dummy-project/large-example.file\n</code></pre>"},{"location":"get_started/basic_usage/11_How-To-S3-Interface/#head-object","title":"Head Object","text":"<p>The HEAD action retrieves metadata from an object without returning the object itself.  This action is useful if you're only interested in an object's metadata. </p> <p> Native S3 Head Object Specification</p> Required permissions <p>This request requires at least READ permissions on the Object or one of its parent resources.</p>  s5cmd <pre><code># Get info of a specific Object\ns5cmd ls s3://dummy-project/example.file\n</code></pre>"},{"location":"get_started/basic_usage/11_How-To-S3-Interface/#get-object","title":"Get Object","text":"<p>Retrieves the data associated with the specific Object.</p> <p> Native S3 Get Object Specification</p> Required permissions <p>This request requires at least READ permissions on the Object or one of its parent resources.</p>  s5cmd <pre><code># Download the data associated with the Object to a local file\ns5cmd cp s3://dummy-project/example.file /tmp/example.file\n</code></pre>"},{"location":"get_started/basic_usage/11_How-To-S3-Interface/#list-bucketsprojects","title":"List buckets/Projects","text":"<p>Lists all the buckets (i.e. Projects) the user has specific permissions for.</p> <p>Native S3 ListBuckets specification</p> Required permissions <p>This request does not require any kind of specific permission but only buckets/Projects the user has permissions on will be returned.</p>  s5cmd <pre><code># List all buckets/Projects a user has permissions for \ns5cmd ls\n</code></pre>"},{"location":"get_started/basic_usage/11_How-To-S3-Interface/#list-bucketproject-objects","title":"List bucket/Project objects","text":"<p>Returns all (up to 1.000 for each request) Objects of a specific bucket i.e. Project.</p> <p>Native S3 ListObjectsV2 specification</p> Required permissions <p>This request requires at least READ permissions on the Project</p>  s5cmd <pre><code># Recursively list all objects in a Project/bucket \ns5cmd ls s3://dummy-project/*\n</code></pre> <pre><code># Recursively list all objects in a public Project/bucket \ns5cmd --no-sign-request ls s3://public-project/*\n</code></pre>"},{"location":"get_started/basic_usage/12_How-To-Search/","title":"How to use the Search API / SearchServiceClient","text":""},{"location":"get_started/basic_usage/12_How-To-Search/#introduction","title":"Introduction","text":"<p>In the FAIR context, the discoverability of data plays one of the most important roles, as even the best data will simply lie unused without a way to be found. Aruna provides a public search index in which specific metadata of all public objects can be searched. The user-defined scope of the search can be adjusted from fuzzy to detailed. A normal search query includes all fields but can be additionally filtered.</p> <p>Depending on the type of field, different operators are useful for filtering:</p> Field Type Examples name String <code>name != genome.fasta</code> description String <code>description != ''</code> object_type Enum <code>object_type = PROJECT</code>, <code>object_type IN [COLLECTION, DATASET]</code> object_type_id Int <code>object_type_id = 1</code>, <code>object_type_id IN [2,3]</code>, <code>object_type_id &gt; 1</code> count Int <code>count &gt; 1</code>, <code>count 1234 TO 123456</code> size Int <code>size &gt; 123456</code>, <code>size 1234 TO 123456</code> status Enum <code>status = AVAILABLE</code>, <code>status NOT DELETED</code> labels Struct <code>labels.variant = LABEL AND labels.key = validated AND labels.value = true</code>,<code>labels.variant = HOOK AND labels.key = my_validator</code> data_class Enum <code>data_class = PUBLIC</code> created_at Int <code>created_at &gt; 1698238293</code>, <code>created_at 1696111200 TO 1698793200</code> metadata_license String <code>metadata_license = CC0</code>, <code>metadata_license IN [CC0, CC-BY-SA-4.0, MIT]</code> data_license String <code>data_license = CC0</code>, <code>data_license IN [CC0, CC-BY-SA-4.0, MIT]</code> <p>These filters can be combined with the <code>AND</code> and <code>OR</code> expressions and nested with brackets <code>(...)</code> for complex queries. An in-depth documentation to the filter operator usage can be found in the Meilisearch Filter expressions documentation.</p> <p>If a user finds an interesting resource but does not have enough access permissions, an access request with a personal message can be sent to the creator of the resource which will be delivered via a personal notification. This can be used to contact the user who created the Object on the first hand.</p>"},{"location":"get_started/basic_usage/12_How-To-Search/#search-resources","title":"Search resources","text":"<p>API examples of how to search resources.</p> <p>The <code>limit</code> and <code>offset</code> parameter can be used to paginate the requests. </p> <ul> <li><code>limit</code> defines how many hits are returned and must be between 1 and 100 (inclusive).</li> <li><code>offset</code> parameter defines how many hits are ignored before the next batch of hits are returned.</li> </ul> Required permissions <p>This request does not require any permissions or authentication.</p>  cURL Rust Python <pre><code># Native JSON request to fuzzy search for a keyword\ncurl '\n  {\n    \"query\": \"fasta\",\n    \"filter\": \"\",\n    \"limit\": \"100\",\n    \"offset\": \"0\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/search\n</code></pre> <pre><code># Native JSON request to specifically search for a keyword\ncurl '\n  {\n    \"query\": \"\\\"genome.fasta\\\"\",\n    \"filter\": \"\",\n    \"limit\": \"100\",\n    \"offset\": \"0\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/search\n</code></pre> <pre><code># Native JSON request to fuzzy search for a keyword with additional filters\ncurl '\n  {\n    \"query\": \"fasta\",\n    \"filter\": \"type = OBJECT\",\n    \"limit\": \"100\",\n    \"offset\": \"0\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/search\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fuzzy search for a keyword\nlet request = SearchResourcesRequest {\n    query: \"fasta\".to_string(),\n    filter: \"\".to_string(),\n    limit: 100,\n    offset: 0,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = search_client.search_resources(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to specifically search for a keyword\nlet request = SearchResourcesRequest {\n    query: \"\\\"genome.fasta\\\"\".to_string(),\n    filter: \"\".to_string(),\n    limit: 100,\n    offset: 0,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = search_client.search_resources(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fuzzy search for a keyword with additional filters\nlet request = SearchResourcesRequest {\n    query: \"fasta\".to_string(),\n    filter: \"type = OBJECT\".to_string(),\n    limit: 100,\n    offset: 0,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = search_client.search_resources(request)\n                             .await\n                             .unwrap()\n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fuzzy search for a keyword\nrequest = SearchResourcesRequest(\n    query=\"fasta\",\n    filter=\"\",\n    limit=100,\n    offset=0\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.search_client.SearchResources(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to specifically search for a keyword\nrequest = SearchResourcesRequest(\n    query=\"\\\"genome.fasta\\\"\",\n    filter=\"\",\n    limit=100,\n    offset=0\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.search_client.SearchResources(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fuzzy search for a keyword with additional filters\nrequest = SearchResourcesRequest(\n    query=\"fasta\",\n    filter=\"type = OBJECT\",\n    limit=100,\n    offset=0\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.search_client.SearchResources(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/12_How-To-Search/#get-public-resources","title":"Get public resource(s)","text":"<p>API examples of how to fetch Object information of public resources.</p> Required permissions <p>This request does not require any permissions or authentication but the Object information will be returned redacted.</p> <p>If an authentication token is provided this request requires at least READ permissions on the specific resources.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of a public Object\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/resource/{resource-id}\n</code></pre> <pre><code># Native JSON request to fetch information of multiple public Objects\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/resources?resourceIds=resource-id-01&amp;resourceIds=resource-id-02'\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of a public Object\nlet request = GetResourceRequest {\n    resource_id: \"&lt;resource-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = search_client.get_resource(request)\n                             .await\n                             .unwrap() \n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of multiple public Objects\nlet request = GetResourcesRequest {\n    resource_ids: vec![\n      \"&lt;resource-id-01&gt;\".to_string(),\n      \"&lt;resource-id-02&gt;\".to_string(),\n      \"&lt;...&gt;\".to_string(),\n    ],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = search_client.get_resources(request)\n                             .await\n                             .unwrap() \n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of a public Object\nrequest = GetResourceRequest(\n    resource_id=\"&lt;resource-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.search_client.GetResource(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of multiple public Objects\nrequest = GetResourceRequest(\n    resource_ids=[\n      \"&lt;resource-id-01&gt;\",\n      \"&lt;resource-id-02&gt;\",\n      \"&lt;...&gt;\"\n    ]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.search_client.GetResource(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/12_How-To-Search/#request-access","title":"Request access","text":"<p>API examples of how to request access for resources owned by other users.</p> Required permissions <p>To request access to a resource you only have to be a registered Aruna user.</p>  cURL Rust Python <pre><code># Native JSON request to request access to an Object of another user\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/resource/resource-id/access?message=Would%20you%20please%20give%20me%20access%20to%20this%20dataset%3F'\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to request access to an Object of another user\nlet request = RequestResourceAccessRequest {\n    resource_id: \"&lt;resource-id&gt;\".to_string(),\n    message: \"Would you please give me access to this dataset?\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = search_client.request_resource_access(request)\n                             .await\n                             .unwrap() \n                             .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create Create tonic/ArunaAPI request to request access to an Object of another user\nrequest = RequestResourceAccessRequest(\n    resource_id=\"&lt;resource-id&gt;\",\n    message=\"Would you please give me access to this dataset?\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.search_client.RequestResourceAccess(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/13_How-To-Hooks/","title":"How to use the Hooks API / HooksServiceClient","text":""},{"location":"get_started/basic_usage/13_How-To-Hooks/#introduction","title":"Introduction","text":"<p>Hooks are the way to automate internal processes in Aruna and/or to integrate external services to extend functionality.  Once created, they're available globally in Aruna, and Projects must be associated with them to be included in their trigger cycle.  The action that triggers the specific hook is defined by its trigger type.</p> <p>The individual trigger types currently include:</p> <ul> <li>HookAdded: Triggers, when a Hook key-value gets added to a resource. Can be limited to specific values.</li> <li>ResourceCreated: Triggers for all hierarchical resources on creation.</li> <li>LabelAdded: Triggers, when a Label key-value gets added to a resource. Can be limited to specific values.</li> <li>ObjectFinished: Triggers only for Objects on finish.</li> <li>StaticLabelAdded: Triggers, when an immutable Label key-value gets added to a resource. Can be limited to specific values.</li> <li>HookStatusChanged: Triggers, if a hook status change occurs on a resource.</li> </ul> <p>A distinction is made between external hooks and internal hooks, which have slightly different use cases.  External hooks address an external service that can use the transferred information to perform its formatting/validation/processing/... and return a result and/or upload the result data itself.  The transferred information contains the metadata of a resource, which can also contain a link to the uploaded data of an Object in order to make it available to the service. Internal hooks are responsible for the automatic binding of specific labels/hooks on resources and/or the creation of relationships.  In other words, internal hooks can be used to automate certain Aruna internal processes.</p> <p>The information sent to the external service can be customized by overwriting with the <code>custom_template</code> parameter. The format of the additional information is absolutely free as long as it contains the mandatory placeholder from the following list:</p> Placeholder Necessity Description {{secret}} mandatory Token secret that contains WRITE permissions on the resource that triggered the Hook. {{object_id}} mandatory Id of the resource that triggered the Hook. {{hook_id}} mandatory Id of the Hook that triggered the external service. {{pubkey_serial}} mandatory Id of the public key that shall be used to verify the token signature. {{name}} optional Name of the resource that triggered the Hook. {{description}} optional Description of the resource that triggered the Hook. {{size}} optional Size in bytes of the resource that triggered the Hook. {{key_values}} optional Key-value pairs of the resource that triggered the Hook. {{status}} optional Status of the resource that triggered the Hook. {{class}} optional Data class of the resource that triggered the Hook. {{endpoints}} optional Endpoints associated with the resource that triggered the Hook. {{download_url}} optional Presigned URL that can used to download the data uploaded to the Object. {{access_key}} optional Access Key Id part of the S3 credentials that can be used to upload data. {{secret_key}} optional Secret Key part of the S3 credentials that can be used to upload data. <p>The default template that gets send if no custom template is defined as JSON:</p> <pre><code>{\n  \"hook_id\": \"{{hook_id}}\",\n  \"object\": {\n    \"resource_id\": \"{{object_id}}\",\n    \"persistent_resource_id\": true/false, // (1)\n    \"checksum\": \"&lt;resource-checksum&gt;\",\n    \"resource_variant\": 1-4 // (2)\n  },\n  \"secret\": \"{{secret}}\",\n  \"download\": \"{{download_url}}\",\n  \"pubkey_serial\": \"{{pubkey_serial}}\",\n  \"access_key\": \"{{access_key}}\",\n  \"secret_key\": \"{{secret_key}}\"\n}\n</code></pre> <ol> <li>Depending if the resource is already archived/snapshot.</li> <li>Available resource variants:     Project = 1     Collection = 2     Dataset = 3     Object = 4</li> </ol>"},{"location":"get_started/basic_usage/13_How-To-Hooks/#create-hook","title":"Create Hook","text":"<p>API examples of how to create a global Hook which can be referenced by any Project.</p> Required permissions <p>To create a new Hook you only have to be a registered Aruna user.</p>  cURL Rust Python <pre><code># Native JSON request to create a new external Hook which triggers \n#    - on object finish\n#    - if the object is tagged with the hook key 'fasta-validation'\ncurl -d '\n  {\n    \"name\": \"Fasta-Validation\",\n    \"trigger\": {\n      \"triggerType\": \"TRIGGER_TYPE_OBJECT_FINISHED\",\n      \"filters\": [\n        {\n          \"name\": \"hook-filter\",\n          \"keyValue\": {\n            \"key\": \"fasta-validation\",\n            \"value\": \"\",\n            \"variant\": \"KEY_VALUE_VARIANT_HOOK\"\n          }\n        }\n      ]\n    },\n    \"hook\": {\n      \"externalHook\": {\n        \"url\": \"https://validation-demonstrator.org/fasta\",\n        \"credentials\": {\n          \"token\": \"SecretHookAuthToken\"\n        },\n        \"customTemplate\": \"\",\n        \"method\": \"METHOD_POST\"\n      },\n      \"internalHook\": {}\n    },\n    \"timeout\": \"\",\n    \"projectIds\": [],\n    \"description\": \"Fasta file format validation demonstrator.\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/hook\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a new external Hook which triggers \n//    - on object finish\n//    - if the object is tagged with the hook key 'fasta-validation'\nlet request = CreateHookRequest {\n    name: \"Fasta-Validation\".to_string(),\n    trigger: Some(Trigger {\n        trigger_type: TriggerType::ObjectFinished as i32,\n        filters: vec![Filter {\n            filter_variant: Some(FilterVariant::KeyValue(KeyValue {\n                key: \"fasta-validation\".to_string(),\n                value: \"\".to_string(),\n                variant: KeyValueVariant::Hook as i32,\n            })),\n        }],\n    }),\n    hook: Some(Hook {\n        hook_type: Some(HookType::ExternalHook(ExternalHook {\n            url: \"https://validation-demonstrator.org/fasta\".to_string(),\n            credentials: Some(Credentials {\n                token: \"SecretHookAuthToken\".to_string(),\n            }),\n            custom_template: None,\n            method: Method::Post as i32,\n        })),\n    }),\n    timeout: 604800, // One week in seconds\n    project_ids: vec![],\n    description: \"Fasta file format validation demonstrator.\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = hook_client.create_hook(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a new external Hook which triggers \n#    - on object finish\n#    - if the object is tagged with the hook key 'fasta-validation'    \nrequest = CreateHookRequest(\n    name=\"Fasta-Validation\",\n    trigger=Trigger(\n        trigger_type=TriggerType.TRIGGER_TYPE_OBJECT_FINISHED,\n        filters=[],\n    ),\n    hook=Hook(\n        external_hook=ExternalHook(\n            url=\"https://validation-demonstrator.org/fasta\",\n            credentials=Credentials(\n                token=\"SecretHookAuthToken\"\n            ),\n            custom_template=\"\",\n            method=Method.METHOD_POST\n        )\n    ),\n    timeout=604800,\n    project_ids=[],\n    description=\"Fasta file format validation demonstrator.\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.hook_client.CreateHook(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/13_How-To-Hooks/#add-projects-to-hook","title":"Add Projects to Hook","text":"<p>Projects have to be added to the globally available hooks to be included in their trigger cycle.</p> Required permissions <p>To add a Hook to a Project you require ADMIN permissions on the Project.</p>  cURL Rust Python <pre><code># Native JSON request to add Projects to a Hook\ncurl '\n  {\n    \"projectIds\": [\n        \"&lt;project-id-01&gt;\",\n        \"&lt;project-id-02&gt;\",\n        \"&lt;...&gt;\",\n    ]\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/hook/{hook-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add Projects to a Hook\nlet request = AddProjectsToHookRequest {\n    hook_id: \"&lt;hook-id&gt;\".to_string(),\n    project_ids: vec![\n        \"&lt;project-id-01&gt;\".to_string(),\n        \"&lt;project-id-02&gt;\".to_string(),\n        \"&lt;...&gt;\".to_string(),\n    ],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = hook_client.add_projects_to_hook(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add Projects to a Hook\nrequest = AddProjectsToHookRequest(\n    hook_id=\"&lt;hook-id&gt;\",\n    project_ids=[\n        \"&lt;project-id-01&gt;\",\n        \"&lt;project-id-02&gt;\",\n        \"&lt;...&gt;\",\n    ]\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.hook_client.AddProjectsToHook(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/13_How-To-Hooks/#get-hooks-of-project","title":"Get Hooks of Project","text":"<p>API examples of how to list all Hooks a specific Project is associated with.</p> Required permissions <p>This request requires at least ADMIN permissions on the specific Project.</p>  cURL Rust Python <pre><code># Native JSON request to create a new external Hook which triggers on object creation\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/hooks/project/{project-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to list all active Hooks of a Project\nlet request = ListProjectHooksRequest { \n    project_id: \"&lt;project-id&gt;\".to_string()\n };\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = hook_client.list_hooks_of_project(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to list all active Hooks of a Project\nrequest = ListProjectHooksRequest(\n    project_id=\"&lt;project-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.hook_client.ListProjectHooks(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/13_How-To-Hooks/#get-hooks-of-creator","title":"Get Hooks of creator","text":"<p>API examples of how to list all Hooks created by a specific user.</p> Required permissions <p>To list your created Hooks you only have to be a registered Aruna user.</p> <p>Global Aruna administrators can list the created Hooks of other users.</p>  cURL Rust Python <pre><code># Native JSON request to create a new external Hook which triggers on object creation\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/hooks/owner/{user-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to list all Hooks created by a specific user\nlet request = ListOwnedHooksRequest {\n    user_id: \"&lt;user-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = hook_client.list_hooks_of_project(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to list all Hooks created by a specific user\nrequest = ListOwnedHooksRequest(\n    user_id=\"&lt;user-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.hook_client.ListOwnedHooks(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/13_How-To-Hooks/#hook-callback","title":"Hook callback","text":"<p>This is the API endpoint which has to be used from an external Hook service to return its execution result.  The result can be either an error message or on success optionally trigger the addition and/or removal of  key-value pairs to a specific Object.</p> Required permissions <p>This request does not require specific permissions as they're handled with the provided token secret.</p>  cURL Rust Python <pre><code># Native JSON request to fuzzy search for a keyword\ncurl '\n  {\n    \"secret\": \"SecretHookAuthToken\"\n    \"hookId\": \"&lt;hook-id&gt;\",\n    \"objectId\": \"&lt;object-id&gt;\",\n    \"pubkeySerial\": 1337,\n    \"error\": \"&lt;error-message&gt;\",\n    \"addKeyValues\": [],\n    \"removeKeyValues\": []\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/hook/callback\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to return a successful external Hook service result\nlet request = HookCallbackRequest {\n    secret: \"SecretHookAuthToken\".to_string(),\n    hook_id: \"&lt;hook-id&gt;\".to_string(),\n    object_id: \"&lt;object-id&gt;&gt;\".to_string(),\n    pubkey_serial: 1337,\n    status: Some(Status::Finished(Finished {\n        add_key_values: vec![KeyValue {\n            key: \"fasta-validated\".to_string(),\n            value: \"true\".to_string(),\n            variant: KeyValueVariant::Label as i32,\n        }],\n        remove_key_values: vec![],\n    })),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = hook_client.hook_callback(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to return a successful external Hook service result\nrequest = HookCallbackRequest(\n    secret=\"SecretHookAuthToken\",\n    hook_id=\"&lt;hook-id&gt;\",\n    object_id=\"&lt;object-id&gt;\",\n    pubkey_serial=1337,\n    finished=Finished(\n        add_key_values=[\n            KeyValue(\n                key=\"fasta-validated\",\n                value=\"true\",\n                variant=KeyValueVariant.KEY_VALUE_VARIANT_LABEL\n            )\n        ],\n        remove_key_values=[]\n    ),\n    error=None\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.hook_client.HookCallback(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/13_How-To-Hooks/#delete-hook","title":"Delete Hook","text":"<p>API examples of how to delete a Hook.</p> Required permissions <p>This request requires ADMIN permissions on all Projects associted with the Hook.</p>  cURL Rust Python <pre><code># Native JSON request to delete a Hook\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/hook/{hook-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete a Hook\nlet request = DeleteHookRequest { \n    hook_id: \"&lt;hook-id&gt;\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = hook_client.delete_hook(request)\n                          .await\n                          .unwrap()\n                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a Hook\nrequest = DeleteHookRequest(\n    hook_id=\"&lt;hook-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.hook_client.HookCallback(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/","title":"How to use the ServiceAccount API / ServiceAccountServiceClient","text":""},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/#introduction","title":"Introduction","text":"<p>Aruna offers the possibility to create service accounts that can be used impersonally,  e.g. by several users at the same time or by a service that communicates with Aruna via the API.</p> <p>In order for a service account to be used against the API, it must be assigned a permission for a specific resource.  For security reasons, a service account can only have this one permission at the same time, which can, however, be adjusted afterwards. </p> <p>The service account also must create at least a personal token for communication with the API,  which takes over the specific permission of the service account in the authorisation process.  If the service account is also to be entrusted with the upload and download of data, S3 credentials must be requested once from each DataProxy where data is to be stored or read. </p> <p>Service Account Limitations</p> <p>Service accounts behave like normal user accounts with the following limitations:</p> <ul> <li>The service account permission can only be set on Projects</li> <li>Only one permission can be assigned at the same time</li> <li>Tokens can only be created on the resource the current permission is associated with and its subresources</li> <li>All service account tokens get deleted if the permission gets set to another Project</li> <li>License and data class updates of resources are not allowed</li> <li>Service accounts are not allowed to send requests against the following services:<ul> <li>EndpointService</li> <li>AuthorizationService</li> <li>UserService</li> <li>LicenseService</li> </ul> </li> </ul>"},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/#create-service-account","title":"Create service account","text":"<p>API examples of how to create a service account.</p> Required permissions <p>Service account creation requires at least ADMIN permissions on the specific resource.</p>  cURL Rust Python <pre><code># Native JSON request to create a service account with ADMIN permission on a Project\ncurl -d '\n  {\n    \"name\": \"&lt;service-account-name&gt;\",\n    \"projectId\": \"&lt;project-id&gt;\",\n    \"permissionLevel\": \"PERMISSION_LEVEL_ADMIN\"\n  }' \\\n    -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n    -H 'Content-Type: application/json' \\\n    -X POST 'https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/service_accounts'\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a service account with ADMIN permission on a Project\nlet request = CreateServiceAccountRequest {\n    name: \"&lt;service-account-name&gt;\".to_string(),\n    project_id: \"&lt;project-id&gt;\".to_string(),\n    permission: PermissionLevel::Admin as i32,\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.create_service_account(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a service account with ADMIN permission on a Project\nrequest = CreateServiceAccountRequest(\n    name=\"&lt;service-account-name&gt;\",\n    project_id=\"&lt;project-id&gt;\",\n    permission=PermissionLevel.PERMISSION_LEVEL_ADMIN\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.CreateServiceAccount(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/#create-service-account-token","title":"Create service account token","text":"<p>API examples of how to generate a token for a service account.</p> <p>Service accounts can have as many tokens as they like, but are limited to resources that are registered hierarchically under the resource for which the service account has its specific permission set.</p> Required permissions <p>Setting the permission of a service account requires at least ADMIN permissions on the previous resource and the specified resource.</p>  cURL Rust Python <pre><code># Native JSON request to create a token with READ permissions on a dataset for a service account\ncurl '\n  {\n    \"permission\": {\n        \"projectId\": \"\",\n        \"collectionId\": \"\",\n        \"datasetId\": \"&lt;dataset-id&gt;\",\n        \"objectId\": \"\",\n        \"permissionLevel\": \"PERMISSION_LEVEL_READ\"\n    },\n    \"name\": \"string\",\n    \"expiresAt\": \"2030-01-01T08:00:00.000Z\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/service_accounts/{svc-account-id}/tokens\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a token with READ permissions on a dataset for a service account\nlet request = CreateServiceAccountTokenRequest {\n    svc_account_id: \"&lt;svc-account-id&gt;\".to_string(),\n    permission: Some(Permission {\n        permission_level: PermissionLevel::Read as i32,\n        resource_id: Some(ResourceId::DatasetId(\"&lt;dataset-id&gt;\".to_string())),\n    }),\n    name: \"&lt;token-name\"&gt;.to_string(),\n    expires_at: Some(\n        NaiveDate::from_ymd_opt(2030, 01, 01)\n            .unwrap()\n            .and_hms_opt(8, 0, 0)\n            .unwrap()\n            .into(),\n    ),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.create_service_account_token(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a token with READ permissions on a dataset for a service account\nrequest = CreateServiceAccountTokenRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\",\n    permission=Permission(\n        collection_id=\"&lt;collection-id&gt;\", # (1)\n        permission_level=PermissionLevel.PERMISSION_LEVEL_WRITE\n    )\n    name=\"&lt;token-name&gt;\",\n    expires_at=Timestamp(seconds=int(datetime.datetime(2030, 1, 1).timestamp()))\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.CreateServiceAccountToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <ol> <li>Empty fields of the request were omitted: <pre><code>request = CreateServiceAccountRequest(\n    name=\"&lt;service-account-name&gt;\",\n    permission=Permission(\n        project_id=\"&lt;project-id&gt;\",\n        collection_id=\"\",\n        dataset_id=\"\",\n        object_id=\"\",\n        permission_level=PermissionLevel.PERMISSION_LEVEL_ADMIN\n    )\n)\n</code></pre></li> </ol>"},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/#get-service-account-tokens","title":"Get service account token(s)","text":"<p>API examples of how to fetch information of one or multiple service account tokens.</p> Required permissions <p>Fetching information of service account tokens requires at least ADMIN permissions on the resource the service account has set its permission on.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of a single specific service account token\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/service_accounts/{svc-account-id}/tokens/{token-id}\n</code></pre> <pre><code># Native JSON request to fetch information of all service account tokens\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/service_accounts/{svc-account-id}/tokens\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of a single specific service account token\nlet request = GetServiceAccountTokenRequest {\n    svc_account_id: \"&lt;svc_account_id&gt;\".to_string(),\n    token_id: \"&lt;token_id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.get_service_account_token(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of all service account tokens\nlet request = GetServiceAccountTokensRequest {\n    svc_account_id: svc_account_id.to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.get_service_account_tokens(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of a single specific service account token\nrequest = GetServiceAccountTokenRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\",\n    token_id=\"&lt;token-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.GetServiceAccountToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of all service account tokens\nrequest = GetServiceAccountTokensRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\",\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.GetServiceAccountTokens(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/#delete-service-account-tokens","title":"Delete service account token(s)","text":"<p>API examples of how to delete one or multiple service account tokens.</p> Required permissions <p>Deletion of service account tokens requires at least ADMIN permissions on the resource the service account has set its permission on.</p>  cURL Rust Python <pre><code># Native JSON request to delete a single specific service account token\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/service_accounts/{svc-account-id}/tokens/{token-id}\n</code></pre> <pre><code># Native JSON request to delete all service account tokens\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/service_accounts/{svc-account-id}/tokens\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete a single specific service account token\nlet request = DeleteServiceAccountTokenRequest {\n    svc_account_id: \"&lt;svc_account_id&gt;\".to_string(),\n    token_id: \"&lt;token_id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.delete_service_account_token(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete all service account tokens\nlet request = DeleteServiceAccountTokensRequest {\n    svc_account_id: svc_account_id.to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.delete_service_account_tokens(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a single specific service account token\nrequest = DeleteServiceAccountTokenRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\",\n    token_id=\"&lt;token-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.DeleteServiceAccountToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete all service account tokens\nrequest = DeleteServiceAccountTokensRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\",\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.DeleteServiceAccountTokens(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/#add-trusted-endpoint-to-service-account","title":"Add trusted endpoint to service account","text":"<p>API examples of how to add a data proxy to the trusted endpoints list of a service account.  This registers the service account at the data proxy and enables up- and downloads.</p> Required permissions <p>Adding a trusted endpoint requires at least ADMIN permissions on the resource the service account has set its permission on.</p>  cURL Rust Python <pre><code># Native JSON request to add a trusted endpoint to the service account\ncurl -d '\n  {\n    \"endpointId\": \"&lt;endpoint-id&gt;\"\n  }' \\ \n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/service_accounts/{svc-account-id}/trusted_endpoints\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add a trusted endpoint to the service account\nlet request = AddTrustedEndpointsSvcAccountRequest {\n    svc_account_id: \"&lt;svc_account_id&gt;\".to_string(),\n    endpoint_id: \"&lt;endpoint_id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.add_trusted_endpoints_svc_account(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a single specific service account token\nrequest = AddTrustedEndpointsSvcAccountRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\",\n    endpoint_id=\"&lt;endpoint-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.AddTrustedEndpointsSvcAccount(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/#get-service-account-s3-credentials","title":"Get service account S3 credentials","text":"<p>API examples of how to get S3 credentials for a service account from a specific DataProxy.</p> Required permissions <p>Fetching S3 credentials requires at least ADMIN permissions on the resource the service account has set its permission on.</p>  cURL Rust Python <pre><code># Native JSON request to fetch S3 credentials for the Aruna server instance default DataProxy\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/s3_credentials/{svcAccountId}/s3_credentials/{endpointId}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request fetch S3 credentials for the Aruna server instance default DataProxy\nlet request = GetS3CredentialsSvcAccountRequest {\n    svc_account_id: \"&lt;svc-account-id&gt;\".to_string(),\n    endpoint_id: \"\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.get_s3_credentials_svc_account(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch S3 credentials for a specific DataProxy\nlet request = GetS3CredentialsSvcAccountRequest {\n    svc_account_id: \"&lt;svc-account-id&gt;\".to_string(),\n    endpoint_id: \"&lt;endpoint-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.get_s3_credentials_svc_account(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch S3 credentials for the Aruna server instance default DataProxy\nrequest = GetS3CredentialsSvcAccountRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.GetS3CredentialsSvcAccount(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch S3 credentials for a specific DataProxy\nrequest = GetS3CredentialsSvcAccountRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\",\n    endpoint_id=\"&lt;endpoint-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.GetS3CredentialsSvcAccount(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/#remove-service-account-s3-credentials","title":"Remove service account S3 credentials","text":"<p>API examples of how to remove S3 credentials from a service account.</p> Required permissions <p>Service account deletion requires at least ADMIN permissions on the resource the service account has set its permission on.</p>  cURL Rust Python <pre><code># Native JSON request to remove S3 credentials from a service account\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X PATCH https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/user/s3_credentials/{svcAccountId}/s3_credentials/{endpointId}/revoke\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to remove S3 credentials from a service account\nlet request = DeleteS3CredentialsSvcAccountRequest {\n    svc_account_id: \"&lt;svc-account-id&gt;\".to_string(),\n    endpoint_id: \"&lt;endpoint-id&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.delete_s3_credentials_svc_account(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to remove S3 credentials from a service account\nrequest = DeleteS3CredentialsSvcAccountRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\"\n    endpoint_id=\"&lt;endpoint-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.DeleteS3CredentialsSvcAccount(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/14_How-To-ServiceAccount/#delete-service-account","title":"Delete service account","text":"<p>API examples of how to delete a service account.</p> Required permissions <p>Service account deletion requires at least ADMIN permissions on the resource the service account has set its permission on.</p>  cURL Rust Python <pre><code># Native JSON request to delete a service account\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/service_accounts/{svc-account-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete a service account\nlet request = DeleteServiceAccountRequest {\n    svc_account_id: \"&lt;svc_account_id&gt;\".to_string()\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = self.service_account_client.delete_service_account(request)\n                                          .await\n                                          .unwrap()\n                                          .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a service account\nrequest = DeleteServiceAccountTokenRequest(\n    svc_account_id=\"&lt;svc-account-id&gt;\"\n)\n\n# Send the request to the Aruna instance gRPC endpoint\nresponse = client.service_account_client.DeleteServiceAccount(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/15_How-To-Workspace/","title":"How to use the Workspace API / WorkspaceServiceClient","text":""},{"location":"get_started/basic_usage/15_How-To-Workspace/#introduction","title":"Introduction","text":"<p>Workspaces are a dedicate class of Projects that can be used to provide unregistered users with an anonymous, encapsulated space in Aruna. When a workspace is created, an internal service account is automatically created for the administration.  Also token is generated for the service account that only has permissions for the workspace and cannot be changed.</p> <p>After a user has registered in Aruna, he/she is free to use this token to claim the entire Workspace and associate it with his or her user like a normal Project. </p> <p>Templates for Workspaces can be created in advance.  Through a template, the basic conditions for the creation of a Workspace are defined and automated in order to simplify the administration of Workspaces.  The following attributes can be defined by a template:</p> <ul> <li>owner: The user id of the owner of the data, as long as it is located in the anonymous workspace</li> <li>prefix: Prefix that is placed in front of the name when resources in the Workspace are created: <code>&lt;prefix&gt;-&lt;resource-name&gt;</code></li> <li>hook_ids: Ids of the hooks to which the workspace is assigned</li> <li>endpoint_ids: Ids of the endpoints that are allowed for the data storage of the Workspace</li> </ul> <p>As long as data is located within an anonymous Workspace, it is not included in the search index.  However, as soon as the data is claimed by a user and it is available with the data class Public/Private, it is also subsequently entered in the search index.</p>"},{"location":"get_started/basic_usage/15_How-To-Workspace/#create-workspace","title":"Create Workspace","text":"<p>API examples of how to create a new Workspace.</p> Required permissions <p>To create a new Workspace you only have to be a registered Aruna user.</p>  cURL Rust <pre><code># Native JSON request to create a new Workspace\ncurl '\n  {\n    \"workspaceTemplate\": \"&lt;workspace-template-id&gt;\",\n    \"description\": \"&lt;workspace-description&gt;\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/workspaces\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a new Workspace\nlet request = CreateWorkspaceRequest {\n    workspace_template: \"&lt;workspace-template-id&gt;\".to_string(),\n    description: \"&lt;workspace-description&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = workspace_client.create_workspace(request)\n                               .await\n                               .unwrap()\n                               .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre>"},{"location":"get_started/basic_usage/15_How-To-Workspace/#create-workspace-template","title":"Create Workspace template","text":"<p>API examples of how to create a new Workspace.</p> Required permissions <p>To create a new Workspace template you do not need special permissions but have to use a personal token.</p>  cURL Rust <pre><code># Native JSON request to create a new Workspace template\ncurl '\n  {\n    \"ownerId\": \"&lt;user-id&gt;\",\n    \"prefix\": \"&lt;name-prefix&gt;\",\n    \"name\": \"&lt;template-name&gt;\",\n    \"hookIds\": [\n        \"&lt;hook-id-01&gt;\",\n        \"&lt;hook-id-02&gt;\",\n        \"&lt;...&gt;\"\n    ],\n    \"description\": \"&lt;template-description&gt;\",\n    \"endpointIds\": [\n        \"&lt;endpoint-id-01&gt;\",\n        \"&lt;endpoint-id-02&gt;\",\n        \"&lt;...&gt;\"\n    ]\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/workspaces/templates\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a new Workspace template\nlet request = CreateWorkspaceTemplateRequest {\n    owner_id: \"&lt;user-id&gt;\".to_string(),\n    prefix: \"&lt;name-prefix&gt;\".to_string(),\n    name: \"&lt;template-name&gt;\".to_string(),\n    hook_ids: vec![\n        \"&lt;hook-id-01&gt;\".to_string(),\n        \"&lt;hook-id-02&gt;\".to_string(),\n        \"&lt;...&gt;\".to_string()\n    ],\n    description: \"&lt;template-description&gt;\".to_string(),\n    endpoint_ids: vec![\n        \"&lt;endpoint-id-01&gt;\".to_string(),\n        \"&lt;endpoint-id-02&gt;\".to_string(),\n        \"&lt;...&gt;\".to_string()\n    ],\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = workspace_client.create_workspace_template(request)\n                               .await\n                               .unwrap()\n                               .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre>"},{"location":"get_started/basic_usage/15_How-To-Workspace/#get-workspace-template","title":"Get Workspace template","text":"<p>API examples of how to get a Workspace template.</p> Required permissions <p>To fetch a Workspace template you do not need special permissions but have to use a personal token.</p> <p>Only global Aruna administrators can fetch information of Workspace templates created by other users.</p>  cURL Rust <pre><code># Native JSON request to fetch information of a specific Workspace template\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/workspaces/templates/{template-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of a specific Workspace template\nlet request = GetWorkspaceTemplateRequest { \n    template_id: \"&lt;template-id&gt;\".to_string() \n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = workspace_client.get_workspace_template(request)\n                               .await\n                               .unwrap()\n                               .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre>"},{"location":"get_started/basic_usage/15_How-To-Workspace/#list-owned-workspace-templates","title":"List owned Workspace templates","text":"<p>API examples of how to get all Workspace templates owned by yourself.</p> Required permissions <p>To fetch all your Workspace templates you do not need special permissions but have to use a personal token.</p>  cURL Rust <pre><code># Native JSON request to fetch information of all your Workspace templates\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X GET https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/workspaces/templates\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of all your Workspace templates\nlet request = ListOwnedWorkspaceTemplatesRequest {};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = workspace_client.list_owned_workspace_templates(request)\n                               .await\n                               .unwrap()\n                               .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre>"},{"location":"get_started/basic_usage/15_How-To-Workspace/#claim-workspace","title":"Claim Workspace","text":"<p>API examples of how to claim an anonymous Workspace for your user.</p> Required permissions <p>To claim a workspace you do not need special permissions but you have to use the specific Workspace token.</p>  cURL Rust <pre><code># Native JSON request to claim a Workspace for your user\ncurl '\n  {\n    \"token\": \"&lt;workspace-token&gt;\"\n  }' \\\n     -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X POST https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/workspaces/{workspace-id}/claim\n</code></pre> <pre><code>// Create tonic/ArunaAPI to claim a Workspace for your user\nlet request = ClaimWorkspaceRequest { \n    workspace_id: \"&lt;workspace-id&gt;\".to_string(), \n    token: \"&lt;workspace-token&gt;\".to_string(),\n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = workspace_client.claim_workspace(request)\n                               .await\n                               .unwrap()\n                               .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre>"},{"location":"get_started/basic_usage/15_How-To-Workspace/#delete-workspace-template","title":"Delete Workspace template","text":"<p>API examples of how to delete a Workspace template.</p> Required permissions <p>To delete a Workspace template you do not need special permissions but have to use a personal token.</p>  cURL Rust <pre><code># Native JSON request delete a Workspace template\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/workspaces/template/{template-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request delete a Workspace template\nlet request = DeleteWorkspaceTemplateRequest { \n    template_id: \"&lt;template-id&gt;\".to_string() \n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = workspace_client.delete_workspace_template(request)\n                               .await\n                               .unwrap()\n                               .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre>"},{"location":"get_started/basic_usage/15_How-To-Workspace/#delete-workspace","title":"Delete Workspace","text":"<p>API examples of how to delete a Workspace.</p> Required permissions <p>This request requires at least APPEND permissions on the specific Workspace.</p>  cURL Rust <pre><code># Native JSON request delete a Workspace\ncurl -H 'Authorization: Bearer &lt;AUTH_TOKEN&gt;' \\\n     -H 'Content-Type: application/json' \\\n     -X DELETE https://&lt;URL-to-Aruna-instance-API-endpoint&gt;/v2/workspaces/{workspace-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request delete a Workspace\nlet request = DeleteWorkspaceRequest { \n    workspace_id: \"&lt;workspace-id&gt;\".to_string() \n};\n\n// Send the request to the Aruna instance gRPC endpoint\nlet response = workspace_client.delete_workspace(request)\n                               .await\n                               .unwrap()\n                               .into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre>"},{"location":"internal_data_structure/database_erd/","title":"Database ERD","text":"<p>This section provides a simplified overview of the ArunaServer database schema through an entity-relationship diagram. </p>  draw.io  Mermaid.js <p> Aruna database entity-relationship diagram. Click for zoom. </p> <pre><code>erDiagram\n\n  users ||--o{ objects : \"creates / owns\"\n  users ||--o{ stream_consumers : \"creates / owns\"\n  users ||--o{ persistent_notifications : \"receives / acknowledges\"\n  users ||--o{ hooks : \"is owner\"\n  users ||--o{ workspaces : \"is owner\"\n  users {\n    UUID id PK\n    TEXT display_name\n    VARCHAR(511) email\n    VARCHAR(511) external_id\n    JSON attributes\n    Boolean active\n  }\n\n  endpoints {\n    UUID id PK\n    TEXT name\n    JSON host_config\n    EndpointVariant endpoint_variant\n    UUID documentation_object FK\n    Boolean is_public\n    EndpointStatus status\n  }\n\n  pub_keys ||--|| endpoints : \"provides public key\"\n  pub_keys {\n    SMALLSERIAL id PK\n    UUID proxy FK\n    TEXT pubkey \"UNIQUE\"\n  }\n\n  licenses ||--|| objects : \"Metadata license\"\n  licenses ||--|| objects : \"Data license\"\n  licenses {\n    VARCHAR(511) tag PK\n    VARCHAR(511) name\n    VARCHAR(1023) description\n    VARCHAR(511) url\n  }\n\n  objects ||--o{ endpoints : \"describes\"\n  objects ||--|{ internal_relations : \"is target\"\n  objects ||--|{ internal_relations : \"is origin\"\n  objects {\n    UUID id PK,UK\n    Int revision_number\n    VARCHAR(511) name\n    VARCHAR(1023) description\n    Timestamp created_at\n    UUID created_by FK\n    Int64 content_len\n    Int count\n    JSON key_values\n    ObjectStatus object_status\n    DataClass data_class\n    ObjectType object_type UK \n    JSON external_relations\n    JSON hashes\n    Boolean dynamic\n    JSON endpoints\n    VARCHAR(511) metadata_license FK\n    VARCHAR(511) data_license FK\n  }\n\n  relation_types ||--o{ internal_relations : \"provides relation name\"\n  relation_types {\n    VARCHAR(511) relation_name PK\n  }\n\n  internal_relations {\n    UUID id PK\n    UUID origin_pid FK,UK\n    ObjectType origin_type FK\n    VARCHAR(511) relation_name FK,UK\n    UUID target_pid FK,UK\n    ObjectType target_type FK\n    VARCHAR(511) target_name\n  }\n\n  stream_consumers {\n    UUID id PK\n    UUID user_id FK\n    JSON config\n  }\n\n  persistent_notifications {\n    UUID id PK\n    UUID user_id FK\n    PersistentNotificationVariant notification_variant\n    TEXT message\n    JSON refs\n  }\n\n  hooks {\n    UUID id PK\n    VARCHAR(511) name\n    VARCHAR(1023) description\n    UUID[] project_ids\n    UUID owner FK\n    JSON trigger\n    TIMESTAMP timeout\n    JSON hook\n  }\n\n  workspaces {\n    UUID id PK\n    VARCHAR(511) name\n    VARCHAR(1023) description\n    UUID owner FK\n    VARCHAR(511) prefix\n    JSON hook_ids\n    JSON endpoint_ids\n  }</code></pre>"},{"location":"internal_data_structure/internal_data_structure/","title":"Internal Data Structure","text":""},{"location":"internal_data_structure/internal_data_structure/#mandatory-hierarchical-resources","title":"Mandatory hierarchical resources","text":""},{"location":"internal_data_structure/internal_data_structure/#project","title":"Project","text":"<p>A Project is the basic resource to organize general user access for stored data  (i.e. Objects).  It also acts as an umbrella container for all other resources which means that every hierarchy has a Project as root.  This directly implies that every project name has to be globally unique in the Aruna universe.</p> <p>You can also archive Projects which makes the Project and all its subresources immutable.  This feature is useful e.g. if the stored data shall be used for any kind of permanent publication.   </p>"},{"location":"internal_data_structure/internal_data_structure/#object","title":"Object","text":"<p>An Object is the resource which fundamentally stores the data in the backend storage system. Depending on the context an Object can represent data or metadata. It must be owned by at least one Project which means that every Object needs at least one Project as root in its hierarchy. Nonetheless, it can be flexibly shared with all other resources by creating the corresponding relation.</p> <p>Additionally, an Object has revisions in contrast to the other resources.  Once uploaded, an Object is immutable. Updates create new Objects that reference the original Object, resulting in a history of changes.   </p>"},{"location":"internal_data_structure/internal_data_structure/#optional-hierarchical-resources","title":"Optional hierarchical resources","text":""},{"location":"internal_data_structure/internal_data_structure/#collection","title":"Collection","text":"<p>A Collection is the basic resource to organize stored data (i.e. Objects) inside Projects. Collections should consist a loose collection of Objects and/or Datasets.</p> <p>Collections can also be snapshot with a version number following semantic versioning principles. On creation of a Collection snapshot, an immutable clone of the Collection and all its subresources gets created. The version number has to be provided manually by the user who initiates the Collection snapshot.   </p>"},{"location":"internal_data_structure/internal_data_structure/#dataset","title":"Dataset","text":"<p>Datasets are a secondary hierarchy resource to organize Objects either inside Collections and/or Projects directly. A Dataset should consist of closely related Objects and should be used to combine data and metadata for easier access and organization.</p> <p>Datasets can also be snapshot with a version number following semantic versioning principles. On creation of a Dataset snapshot, an immutable clone of the Dataset and all its subresources gets created. The version number has to be provided manually by the user who initiates the Dataset snapshot.   </p>"},{"location":"internal_data_structure/internal_data_structure/#other-resources","title":"Other resources","text":""},{"location":"internal_data_structure/internal_data_structure/#label","title":"Label","text":"<p>Simple resource representing a plaintext key-value pair which is directly associated with an individual Project, Collection, Dataset or Object. A Label can be used to describe short additional properties of a resource.   </p>"},{"location":"internal_data_structure/internal_data_structure/#hook","title":"Hook","text":"<p>Simple resource representing a plaintext value which is directly associated with an individual Project, Collection, Dataset or Object. A Hook can be used to reference (external) services which automatically process/validate/etc. the uploaded data upon registration.   </p>"},{"location":"internal_data_structure/internal_data_structure/#resource-relations-concept","title":"Resource relations concept","text":"<p>All resources and their relationships form a directed acyclic graph (DAG) with Projects as roots and Objects as leaves.  Collections and Datasets can exist directly beneath Projects but only a Dataset and/or Objects can be created inside a Collection.  This gives us the following possibilities to create a hierarchy for uploaded data:</p> <ul> <li><code>Project</code> &gt; <code>Collection</code> &gt; <code>Dataset</code> &gt; <code>Object</code></li> <li><code>Project</code> &gt; <code>Collection</code> &gt; <code>Object</code></li> <li><code>Project</code> &gt; <code>Dataset</code> &gt; <code>Object</code></li> <li><code>Project</code> &gt; <code>Object</code></li> </ul> <p>In our model, we also distinguish internal relations between Aruna resources and external relations  which point to resources outside of Aruna e.g. a DOI. </p> <p>Following there is a list of predefined internal relations:</p> <ul> <li><code>BELONGS_TO</code> - Relation which describes resource hierarchy (<code>Project</code> &gt; <code>Collection</code> &gt; <code>Dataset</code> &gt; <code>Object</code>)</li> <li><code>ORIGIN</code> - Relation to original resource of clone</li> <li><code>VERSION</code> - Relation to resource the version/revision was created from</li> <li><code>METADATA</code> - Data  Metadata relation</li> <li><code>POLICY</code> - Relation to custom policy associated with the resource (currently not supported)</li> <li><code>DELETED</code> - Former <code>BELONGS_TO</code> relation of deleted resources</li> </ul> <p>But you also have the possibility to create further, user-defined relations which are not limited in direction and/or meaning with the internal relation variant <code>CUSTOM</code>.</p> <p> </p> <p>Hierarchical structure of Aruna resources. Resources form a directed acyclic graph of belongs to relationships (blue) with Projects as roots and Objects as leaves. Resources can also describe horizontal version relationships (orange), data/metadata relationships (yellow) or even custom user-defined relationships (green).</p>"},{"location":"internal_data_structure/internal_data_structure/#state-system","title":"State system","text":"<p>Objects in the storage have states. These are used to indicate the status of an Object during its lifecycle.</p> INITIALIZING <p>After Object creation/initialization but before Object finishing.</p> VALIDATING <p>After Object finish while data validation is still running.</p> AVAILABLE <p>After Object finishing/validation if everything succeeded.</p> UNAVAILABLE <p>E.g. while all Dataproxy endpoints are unavailable which hold the Objects' data.</p> ERROR <p>If something went wrong e.g. incomplete upload of data.</p> DELETED <p>Object was deleted and remains only as data tombstone.</p>"}]}